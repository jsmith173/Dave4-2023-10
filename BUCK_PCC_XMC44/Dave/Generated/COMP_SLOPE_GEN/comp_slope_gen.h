/**
 * @file comp_slope_gen.h
 * @date 2021-01-08
 *
 * NOTE:
 * This file is generated by DAVE. Any manual modification done to this file will be lost when the code is regenerated.
 *
 * @cond
 ***********************************************************************************************************************
 * COMP_SLOPE_GEN v4.0.10 - CSG APP generates PWM using comparator and slope generator.
 *                          This APP requires GLOBAL_CCU8 consuming kernal 0
 *
 * Copyright (c) 2015-2020, Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following
 *   disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
 *   disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes
 * with Infineon Technologies AG (dave@infineon.com).
 ***********************************************************************************************************************
 *
 * Change History
 * --------------
 *
 * 2015-02-14:
 *     - Initial version for DAVEv4
 *
 * 2015-05-20:
 *     - Logic for LLD version check is added.
 *
 * 2015-06-19:
 *     - Logic for LLD version check is removed.
 *     - LLD package version check is added.
 *
 * 2015-06-20:
 *     - Copyright information updated.
 *
 * 2021-01-08:
 *     - Modified check for minimum XMCLib version
 *
 * @endcond
 *
 */

#ifndef COMP_SLOPE_GEN_H_
#define COMP_SLOPE_GEN_H_

/***********************************************************************************************************************
 * HEADER FILES
 **********************************************************************************************************************/
#include "xmc_gpio.h"

#include "comp_slope_gen_conf.h"

/**********************************************************************************************************************
* MACROS
**********************************************************************************************************************/
#define COMP_SLOPE_GEN_XMC_LIB_MAJOR_VERSION 2
#define COMP_SLOPE_GEN_XMC_LIB_MINOR_VERSION 0
#define COMP_SLOPE_GEN_XMC_LIB_PATCH_VERSION 0

#if !((XMC_LIB_MAJOR_VERSION > COMP_SLOPE_GEN_XMC_LIB_MAJOR_VERSION) ||\
      ((XMC_LIB_MAJOR_VERSION == COMP_SLOPE_GEN_XMC_LIB_MAJOR_VERSION) && (XMC_LIB_MINOR_VERSION > COMP_SLOPE_GEN_XMC_LIB_MINOR_VERSION)) ||\
      ((XMC_LIB_MAJOR_VERSION == COMP_SLOPE_GEN_XMC_LIB_MAJOR_VERSION) && (XMC_LIB_MINOR_VERSION == COMP_SLOPE_GEN_XMC_LIB_MINOR_VERSION) && (XMC_LIB_PATCH_VERSION >= COMP_SLOPE_GEN_XMC_LIB_PATCH_VERSION)))
#error "COMP_SLOPE_GEN requires XMC Peripheral Library v2.0.0 or higher"
#endif

#define COMP_SLOPE_GEN_MAX_DAC_VALUE        1023U
#define COMP_SLOPE_GEN_WINDOW_SIZE          63U

/**********************************************************************************************************************
* ENUMS
**********************************************************************************************************************/
 /**
  * @ingroup COMP_SLOPE_GEN_enumerations
  * @{
  */

/**
 *   @brief The type identifies COMP_SLOPE_GEN CSG APP status.
 */
typedef enum COMP_SLOPE_GEN_STATUS
{
 /**
 * STATUS SUCCESS
 */
  COMP_SLOPE_GEN_STATUS_SUCCESS = 0,
  /**
  * STATUS FAILURE
  */
  COMP_SLOPE_GEN_STATUS_FAILURE,
  /**
  * STATUS ALREADY INITIALIZED
  */
  COMP_SLOPE_GEN_STATUS_ALREADY_INITIALIZED
} COMP_SLOPE_GEN_STATUS_t;


/**
 * @brief The type identifies COMP_SLOPE_GEN APP state.
 */
typedef enum COMP_SLOPE_GEN_STATE
{
  /**
   * default state after power on reset
   */
  COMP_SLOPE_GEN_UNINITIALIZED,

  /**
   * APP is initialized as per selected parameters
   */
  COMP_SLOPE_GEN_INITIALIZED,

  /**
   * Slope generation and comparator unit is operating as per configuration.
   */
  COMP_SLOPE_GEN_RUNNING,

  /**
   * Slope generation and comparator unit operation is stopped.
   */
  COMP_SLOPE_GEN_STOPPED

} COMP_SLOPE_GEN_STATE_t;

/**
 * @}
 */

/**********************************************************************************************************************
* DATA STRUCTURES
**********************************************************************************************************************/
/**
  * @ingroup COMP_SLOPE_GEN_datastructures
  * @{
  */

/**
 * @brief Configuration parameters of the COMP_SLOPE_GEN APP
 */
typedef struct COMP_SLOPE_GEN_ConfigType
{
  const XMC_HRPWM_CSG_CMP_t            *const csg_cmp_config;              /* Configuration parameters for comparator initialization*/
  const XMC_HRPWM_CSG_DAC_t            *const csg_dac_config;              /* Configuration parameters for dac initialization*/
  const XMC_HRPWM_CSG_SGEN_t           *const csg_sgen_config;             /* Configuration parameters for slope generator initialization*/
  const XMC_HRPWM_CSG_INPUT_CONFIG_t   *const csg_blanking_config;         /* Configuration parameters for blanking initialization*/
  const XMC_HRPWM_CSG_INPUT_CONFIG_t   *const csg_clamping_config;         /* Configuration parameters for clamping initialization*/
  const XMC_HRPWM_CSG_INPUT_CONFIG_t   *const csg_start_slope_config;      /* Configuration parameters for slope start initialization*/
  const XMC_HRPWM_CSG_INPUT_CONFIG_t   *const csg_shadow_transfer_config;  /* Configuration parameters for shadow transfer initialization*/
  const XMC_HRPWM_CSG_RUN_BIT_t               csg_dac_run_bit;             /* Mask for dac run enable bit */
  const XMC_HRPWM_CSG_RUN_BIT_t               csg_cmp_run_bit;             /* Mask for comparator run enable bit */
  const XMC_HRPWM_CSG_RUN_BIT_t               csg_cmp_psl_bit;             /* Mask for comparator passive level enable bit */
  const XMC_HRPWM_CSG_SLOPE_START_t           csg_dac_slope_start;         /* Mask for slope start enable bit */
  const XMC_HRPWM_CSG_SLOPE_STOP_t            csg_dac_slope_stop;          /* Mask for slope stop enable bit */
  const XMC_HRPWM_CSG_PRESCALER_START_t       csg_dac_prescaler_start;     /* Mask for prescaler start enable bit */
  const XMC_HRPWM_CSG_PRESCALER_STOP_t        csg_dac_prescaler_stop;      /* Mask for prescaler stop enable bit */

  const bool                                  int_cmp_rise;                /* Boolean for comparator output rise edge interrupt enable*/
  const bool                                  int_cmp_fall;                /* Boolean for comparator output fall edge interrupt enable*/
  const bool                                  int_clamp_state_enter;       /* Boolean for comparator output clamped interrupt enable*/

  const XMC_HRPWM_CSG_IRQ_SR_LINE_t           sr_crse;                     /* comparator output rise edge event service node */
  const XMC_HRPWM_CSG_IRQ_SR_LINE_t           sr_cfse;                     /* comparator output fall edge event service node */
  const XMC_HRPWM_CSG_IRQ_SR_LINE_t           sr_csee;                     /* comparator output clamped event service node */

  const bool                                  run_dac_at_init;             /* Boolean for running the slope generation and dac at init*/

        GLOBAL_CCU8_t                  *const global_ccu8_handle;          /* GLOBAL_CCU8 APP handle*/
        GLOBAL_HRPWM_t                 *const global_hrpwm_handle;         /* GLOBAL_HRPWM APP handle*/
} COMP_SLOPE_GEN_CONFIG_t;

/**
 * @brief Initialization parameters of the COMP_SLOPE_GEN APP
 */
typedef struct COMP_SLOPE_GEN_HandleType
{
  const COMP_SLOPE_GEN_CONFIG_t        *const  config_ptr;                /* Pointer to COMP_SLOPE_GEN APP configuration parameters*/
        XMC_HRPWM_t                    *const  csg_module_ptr;            /* Pointer to CSG kernel */
        XMC_HRPWM_CSG_t                *const  csg_slice_ptr;             /* Pointer to CSG slice */

  const uint8_t                                csg_kernel_number;         /* CSG kernel number*/
  const uint8_t                                csg_slice_number;          /* CSG slice number*/
  const XMC_HRPWM_SHADOW_TX_DAC_t              csg_shadow_transfer_msk;   /* Mask for shadow transfer bit */

        COMP_SLOPE_GEN_STATE_t                 state;                     /* Holds the state of COMP_SLOPE_GEN APP */

} COMP_SLOPE_GEN_t;

/**
 * @}
 */

/**
 * @ingroup COMP_SLOPE_GEN_apidoc
 * @{
 */

/***********************************************************************************************************************
 * API Prototypes
 **********************************************************************************************************************/
/* Support for C++ */
#ifdef __cplusplus
extern "C" {
#endif

/**
 * @brief Retrieves the version of the COMP_SLOPE_GEN APP.
 * @param None
 * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 *
 * \par<b>Description: </b><br>
 * The function can be used to check application software compatibility with a specific version of the APP.
 *
 *Example Usage:
 *
 * @code
  #include <DAVE.h>

  int main(void)
  {
    DAVE_APP_VERSION_t version;
    version = COMP_SLOPE_GEN_GetAppVersion();
    while(1);
    return 0;
  }
 * @endcode
 */

DAVE_APP_VERSION_t COMP_SLOPE_GEN_GetAppVersion(void);

/**
 * @brief Initializes the COMP_SLOPE_GEN APP.
 * @param  handle_ptr Pointer to COMP_SLOPE_GEN_t structure containing APP parameters.
 * @return COMP_SLOPE_GEN_STATUS_t\n
 *
 * \par<b>Description: </b><br>
 * Configures the comparator and slope generator slice registers with the selected COMP_SLOPE_GEN APP parameters.
 *
 * Example Usage:
 * @code
  #include <DAVE.h>

  int main(void)
  {
   DAVE_Init(); //COMP_SLOPE_GEN_Init() is called by DAVE_Init().
    while(1);
    return 0;
  }
 * @endcode
 */
COMP_SLOPE_GEN_STATUS_t COMP_SLOPE_GEN_Init(COMP_SLOPE_GEN_t* handle_ptr);

/**
 * @brief Start the selected comparator and slope generator slice.
 * @param  handle_ptr Pointer to COMP_SLOPE_GEN_t structure containing APP parameters.
 * @return COMP_SLOPE_GEN_STATUS_t\n
 *
 * \par<b>Description: </b><br>
 * Starts the selected comparator and slope generator slice. Returns COMP_SLOPE_GEN_STATUS_SUCCESS if the COMP_SLOPE_GEN APP state
 * is in "COMP_SLOPE_GEN_INITIALIZED" or "COMP_SLOPE_GEN_STOPPED" else returns COMP_SLOPE_GEN_STATUS_FAILURE.
 * <br>This API puts the APP state to "COMP_SLOPE_GEN_RUNNING".
 * <br>COMP_SLOPE_GEN_Start_CSG() is needed to be called if "Run DAC at Init" is unchecked,
 * else its called by COMP_SLOPE_GEN_Init();
 *
 * Example Usage:
 * @code
  #include <DAVE.h>

  int main(void)
  {
   DAVE_Init();
   //This API needs to be called if "Run DAC at Init" is unchecked
   COMP_SLOPE_GEN_Start_CSG(&COMP_SLOPE_GEN_0);
   while(1);
   return 0;
  }
 * @endcode
*/
COMP_SLOPE_GEN_STATUS_t COMP_SLOPE_GEN_Start_CSG(COMP_SLOPE_GEN_t* handle_ptr);

/**
 * @brief Stops the selected comparator and slope generator slice.
 * @param  handle_ptr Pointer to COMP_SLOPE_GEN_t structure containing APP parameters.
 * @return COMP_SLOPE_GEN_STATUS_t\n
 *
 * \par<b>Description: </b><br>
 * Stops the selected comparator and slope generator slice. Returns COMP_SLOPE_GEN_STATUS_FAILURE if the COMP_SLOPE_GEN APP state
 * is in "COMP_SLOPE_GEN_UNINITIALIZED" else returns COMP_SLOPE_GEN_STATUS_SUCCESS.
 * <br>This API puts the APP state to "COMP_SLOPE_GEN_STOPPED".
 *
 * Example Usage:
 * @code
  #include <DAVE.h>

  int main(void)
  {
   DAVE_Init();
   COMP_SLOPE_GEN_Stop_CSG(&COMP_SLOPE_GEN_0);
   while(1);
   return 0;
  }
 * @endcode
*/
COMP_SLOPE_GEN_STATUS_t COMP_SLOPE_GEN_Stop_CSG(COMP_SLOPE_GEN_t* handle_ptr);

/**
 * @brief Sets the start value of slope generator.
 * @param handle_ptr Pointer to COMP_SLOPE_GEN_t structure containing APP parameters.
 * @param start_value DSV1 register value
 * @return COMP_SLOPE_GEN_STATUS_t\n
 *
 * \par<b>Description: </b><br>
 * Sets the CSG DSV1 shadow register if the APP is not in uninitialized state. It triggers for shadow transfer.
 * The shadow transfer happens at the beginning of slope generation cycle.
 * <br> This is the start value of slope generation.
 *
 * Example Usage:
 * @code
   #include <DAVE.h>
  int main(void)
  {
   COMP_SLOPE_GEN_STATUS_t status;
   DAVE_Init();
   status = COMP_SLOPE_GEN_SetDACStartValue(&COMP_SLOPE_GEN_0, 800);
   while(1);
   return 0;
  }
 * @endcode
*/
COMP_SLOPE_GEN_STATUS_t COMP_SLOPE_GEN_SetDACStartValue(COMP_SLOPE_GEN_t *handle_ptr, uint16_t start_value);

/**
 * @brief Sets the stop value of slope generator.
 * @param handle_ptr Pointer to COMP_SLOPE_GEN_t structure containing APP parameters.
 * @param stop_value DSV2 register value
 * @return COMP_SLOPE_GEN_STATUS_t\n
 *
 * \par<b>Description: </b><br>
 * Sets the CSG DSV2 register if the APP is not in uninitialized state. Note DSV2 does not have shadow register.
 * <br>This value is used for slope generation if external signal is not used for triggering restart of slope.
 * <br>In decrement mode its the lowest value the dac reaches,after which the dac is started from DSV1 value (DSV1 > DSV2).
 * <br>In increment mode its the highest value of dac reaches, after which the dac is started from DSV1 value (DSV1 < DSV2).
 * <br>In triangle mode its the highest value of dac reachs, after which the dac starts decrementing to DAV1 value (DSV1 < DSV2).
 *
 * Example Usage:
 * @code
   #include <DAVE.h>
  int main(void)
  {
   COMP_SLOPE_GEN_STATUS_t status;
   DAVE_Init();
   status = COMP_SLOPE_GEN_SetDACStopValue(&COMP_SLOPE_GEN_0, 100);
   while(1);
   return 0;
  }
 * @endcode
*/
COMP_SLOPE_GEN_STATUS_t COMP_SLOPE_GEN_SetDACStopValue(COMP_SLOPE_GEN_t *handle_ptr, uint16_t stop_value);

/**
 * @brief Sets the pulse swallow value of slope generator.
 * @param handle_ptr Pointer to COMP_SLOPE_GEN_t structure containing APP parameters.
 * @param swallowed_pulses number of pulses to swallow in 64 pulse window.
 * @return COMP_SLOPE_GEN_STATUS_t\n
 *
 * \par<b>Description: </b><br>
 * Sets the CSG pulse swallow register if the APP is not in uninitialized state and pulse swallow value is less than 64.
 * The pulse swallow whidow is set to 64 in this APP. A shadow transfer is requested.
 *
 * Example Usage:
 * @code
   #include <DAVE.h>
  int main(void)
  {
   COMP_SLOPE_GEN_STATUS_t status;
   DAVE_Init();
   status = COMP_SLOPE_GEN_SetDACSwallowedPulses(&COMP_SLOPE_GEN_0, 30);
   while(1);
   return 0;
  }
 * @endcode
*/
COMP_SLOPE_GEN_STATUS_t COMP_SLOPE_GEN_SetDACSwallowedPulses(COMP_SLOPE_GEN_t *handle_ptr, uint16_t swallowed_pulses);

/**
 * @brief Clamps the comparator output to passive level.
 * @param handle_ptr Pointer to COMP_SLOPE_GEN_t structure containing APP parameters.
 * @return COMP_SLOPE_GEN_STATUS_t\n
 *
 * \par<b>Description: </b><br>
 * Sets the comparator output to passive level if the APP is not in uninitialized state.
 * The passive level can be set to high or low value. The comparator output is not dependent on voltage at its input pins.
 *
 * Example Usage:
 * @code
   #include <DAVE.h>
  int main(void)
  {
   COMP_SLOPE_GEN_STATUS_t status;
   DAVE_Init();
   status = COMP_SLOPE_GEN_ClampCMPOutput(&COMP_SLOPE_GEN_0);
   while(1);
   return 0;
  }
 * @endcode
*/
COMP_SLOPE_GEN_STATUS_t COMP_SLOPE_GEN_ClampCMPOutput(COMP_SLOPE_GEN_t *handle_ptr);

/**
 * @brief Removes the comparator from clamped state.
 * @param handle_ptr Pointer to COMP_SLOPE_GEN_t structure containing APP parameters.
 * @return COMP_SLOPE_GEN_STATUS_t\n
 *
 * \par<b>Description: </b><br>
 * Removes the comparator from clamped state if the APP is not in uninitialized state.
 * The comparator output is dependent on voltage at its input pins.
 *
 * Example Usage:
 * @code
   #include <DAVE.h>
  int main(void)
  {
   COMP_SLOPE_GEN_STATUS_t status;
   DAVE_Init();
   status = COMP_SLOPE_GEN_UnClampCMPOutput(&COMP_SLOPE_GEN_0);
   while(1);
   return 0;
  }
 * @endcode
*/
COMP_SLOPE_GEN_STATUS_t COMP_SLOPE_GEN_UnClampCMPOutput(COMP_SLOPE_GEN_t *handle_ptr);

#include "comp_slope_gen_extern.h"

/**
 * @}
 */
#ifdef __cplusplus
}
#endif

#endif /* COMP_SLOPE_GEN_H_ */



