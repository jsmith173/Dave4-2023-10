package Model.APPS.HRPWM.v4_1_22;

// Import statements
import ifx.davex.app.manifest.*

abstract class HRPWM_GUI extends AppManifest {
	/* Begin : UI variable section */
	 public GTab gtab_general;
	 public GTab gtab_hrpwm;
	 public GTab gtab_ee;
	 public GTab gtab_interrupts;
	 public GTab gtab_pins;
	 public GImage gimage_general_img1;
	 public GImage gimage_pin_hrc;
	 public GInteger ginteger_freq;
	 public GInteger ginteger_period;
	 public GInteger ginteger_cmp_ch1;
	 public GInteger ginteger_hr_cmp1;
	 public GInteger ginteger_cmp_ch2;
	 public GInteger ginteger_hr_cmp2;
	 public GCombo gcombo_counting_mode;
	 public GCombo gcombo_compare_mode;
	 public GCombo gcombo_hr_conn;
	 public GCombo gcombo_hr_set0;
	 public GCombo gcombo_hr_clear0;
	 public GCombo gcombo_lr_conn;
	 public GCombo gcombo_lr_set1;
	 public GCombo gcombo_lr_clear1;
	 public GCombo gcombo_hr_out0_pass_level;
	 public GCombo gcombo_hr_out0_conn;
	 public GCombo gcombo_hr_out1_pass_level;
	 public GCombo gcombo_hr_out1_conn;
	 public GCombo gcombo_e0_fn;
	 public GCombo gcombo_e0_trigger;
	 public GCombo gcombo_e0_filter;
	 public GCombo gcombo_e1_fn;
	 public GCombo gcombo_e1_trigger;
	 public GCombo gcombo_e1_filter;
	 public GCombo gcombo_e2_fn;
	 public GCombo gcombo_e2_trigger;
	 public GCombo gcombo_e2_filter;
	 public GCombo gcombo_ext_start_edge;
	 public GCombo gcombo_ext_start_action;
	 public GCombo gcombo_ext_stop_edge;
	 public GCombo gcombo_ext_stop_action;
	 public GCombo gcombo_ext_trap_level;
	 public GCombo gcombo_ext_trap_sync;
	 public GCombo gcombo_ext_trap_exit;
	 public GCombo gcombo_ext_load_edge;
	 public GCombo gcombo_ext_count_edge;
	 public GCombo gcombo_ext_e1_override_edge;
	 public GCombo gcombo_ext_gate_level;
	 public GCombo gcombo_ext_count_dir_level;
	 public GCombo gcombo_ext_e2_override_level;
	 public GCombo gcombo_ext_mod_level;
	 public GCombo gcombo_ext_mod_sync;
	 public GCombo gcombo_ext_mod_mode;
	 public GCombo gcombo_hr_out0_char;
	 public GCombo gcombo_hr_out0_strng;
	 public GCombo gcombo_hr_out1_char;
	 public GCombo gcombo_hr_out1_strng;
	 public GFloat gfloat_clock;
	 public GFloat gfloat_act_res;
	 public GFloat gfloat_act_freq;
	 public GFloat gfloat_act_duty;
	 public GFloat gfloat_hr_dt_rise;
	 public GFloat gfloat_hr_dt_fall;
	 public GCheck gcheck_init_start;
	 public GCheck gcheck_single_shot;
	 public GCheck gcheck_hr_enable;
	 public GCheck gcheck_lr_enable;
	 public GCheck gcheck_hr_dt_enable;
	 public GCheck gcheck_hr_out0_trap;
	 public GCheck gcheck_hr_out1_trap;
	 public GCheck gcheck_sync_start;
	 public GCheck gcheck_ext_trap;
	 public GCheck gcheck_int_per_match;
	 public GCheck gcheck_int_one_match_down;
	 public GCheck gcheck_int_cmp1_match_up;
	 public GCheck gcheck_int_cmp1_match_down;
	 public GCheck gcheck_int_cmp2_match_up;
	 public GCheck gcheck_int_cmp2_match_down;
	 public GCheck gcheck_int_e0;
	 public GCheck gcheck_int_e1;
	 public GCheck gcheck_int_e2;
	 public GCheck gcheck_hr_out0_enable;
	 public GCheck gcheck_hr_out1_enable;
	 public GLabel gLabel378;
	 public GLabel glabel_image_note;
	 public GGroup ggroup_duty;
	 public GGroup ggroup_image;
	 public GGroup ggroup_hr_dt;
	 public GGroup ggroup_event0;
	 public GGroup ggroup_event1;
	 public GGroup ggroup_event2;
	 public GGroup ggroup_ext_start;
	 public GGroup ggroup_ext_stop;
	 public GGroup ggroup_ext_trap;
	 public GGroup ggroup_ext_load;
	 public GGroup ggroup_ext_count;
	 public GGroup ggroup_ext_e1_override;
	 public GGroup ggroup_ext_gate;
	 public GGroup ggroup_ext_count_dir;
	 public GGroup ggroup_ext_e2_override;
	 public GGroup ggroup_ext_mod;
	 public GGroup ggroup_166;
	 public GGroup ggroup_hr_out0_setting;
	 public GGroup ggroup_hr_out1_setting;
	 public GMessage gmessage_clock;

	 public HRPWM_GUI(DaveEnv daveEnv){

	 gtab_general = GTab(widgetName:"gtab_general", text:"General Settings", enabled:true, visible:true)
	 gtab_hrpwm = GTab(widgetName:"gtab_hrpwm", text:"HRPWM Settings", enabled:true, visible:true)
	 gtab_ee = GTab(widgetName:"gtab_ee", text:"External Event Settings", enabled:true, visible:true)
	 gtab_interrupts = GTab(widgetName:"gtab_interrupts", text:"Timer Event Settings", enabled:true, visible:true)
	 gtab_pins = GTab(widgetName:"gtab_pins", text:"Pin Settings", enabled:true, visible:true)
	 gimage_general_img1 = GImage(widgetName:"gimage_general_img1", path: "Uimodel/general_img1.PNG", enabled:true, visible:true)
	 gimage_pin_hrc = GImage(widgetName:"gimage_pin_hrc", path: "Uimodel/HRPWM.PNG", enabled:true, visible:true)
	 ginteger_freq = GInteger(widgetName:"ginteger_freq", value:100000, minValue:1, maxValue:30000000, enabled:true, visible:true, isMandatoryValue:false)
	 ginteger_period = GInteger(widgetName:"ginteger_period", value:39999, minValue:0, maxValue:65535, enabled:true, visible:true, isMandatoryValue:false)
	 ginteger_cmp_ch1 = GInteger(widgetName:"ginteger_cmp_ch1", value:100, minValue:0, maxValue:65535, enabled:true, visible:true, isMandatoryValue:false)
	 ginteger_hr_cmp1 = GInteger(widgetName:"ginteger_hr_cmp1", value:0, minValue:0, maxValue:82, enabled:true, visible:true, isMandatoryValue:false)
	 ginteger_cmp_ch2 = GInteger(widgetName:"ginteger_cmp_ch2", value:200, minValue:0, maxValue:65535, enabled:true, visible:true, isMandatoryValue:false)
	 ginteger_hr_cmp2 = GInteger(widgetName:"ginteger_hr_cmp2", value:0, minValue:0, maxValue:82, enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_counting_mode = GCombo(widgetName:"gcombo_counting_mode", options:["Edge Aligned","Center Aligned"], value:"Edge Aligned", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_compare_mode = GCombo(widgetName:"gcombo_compare_mode", options:["Symmetric","Asymmetric"], value:"Symmetric", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_hr_conn = GCombo(widgetName:"gcombo_hr_conn", options:["Set0 <-> CCU8;       Clear0 <-> CCU8","Set0 <-> CCU8;       Clear0 <-> Manually","Set0 <-> Manually; Clear0 <-> CCU8","Set0 <-> Manually; Clear0 <-> Manually"], value:"Set0 <-> CCU8;       Clear0 <-> CCU8", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_hr_set0 = GCombo(widgetName:"gcombo_hr_set0", options:["Inactive","Rising","Falling","Both"], value:"Rising", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_hr_clear0 = GCombo(widgetName:"gcombo_hr_clear0", options:["Inactive","Rising","Falling","Both"], value:"Falling", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_lr_conn = GCombo(widgetName:"gcombo_lr_conn", options:["Set1 <-> CCU8;       Clear1 <-> CCU8","Set1 <-> CCU8;       Clear1 <-> Manually","Set1 <-> Manually; Clear1 <-> CCU8","Set1 <-> Manually; Clear1 <-> Manually"], value:"Set1 <-> Manually; Clear1 <-> Manually", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_lr_set1 = GCombo(widgetName:"gcombo_lr_set1", options:["Inactive","Rising","Falling","Both"], value:"Inactive", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_lr_clear1 = GCombo(widgetName:"gcombo_lr_clear1", options:["Inactive","Rising","Falling","Both"], value:"Inactive", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_hr_out0_pass_level = GCombo(widgetName:"gcombo_hr_out0_pass_level", options:["Low","High"], value:"Low", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_hr_out0_conn = GCombo(widgetName:"gcombo_hr_out0_conn", options:["Q","Qn"], value:"Q", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_hr_out1_pass_level = GCombo(widgetName:"gcombo_hr_out1_pass_level", options:["Low","High"], value:"Low", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_hr_out1_conn = GCombo(widgetName:"gcombo_hr_out1_conn", options:["Qn","Q"], value:"Qn", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_e0_fn = GCombo(widgetName:"gcombo_e0_fn", options:["No Event","External Start","External Stop","External Count Direction","External Gating","External Count","External Load","External Modulation"], value:"No Event", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_e0_trigger = GCombo(widgetName:"gcombo_e0_trigger", options:["No Trigger","Rising","Falling","Both"], value:"No Trigger", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_e0_filter = GCombo(widgetName:"gcombo_e0_filter", options:["No Filter","3 CCU8 Clock Cycles","5 CCU8 Clock Cycles","7 CCU8 Clock Cycles"], value:"No Filter", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_e1_fn = GCombo(widgetName:"gcombo_e1_fn", options:["No Event","External Start","External Stop","External Count Direction","External Gating","External Count","External Load","External Modulation","External Override (Edge)"], value:"No Event", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_e1_trigger = GCombo(widgetName:"gcombo_e1_trigger", options:["No Trigger","Rising","Falling","Both"], value:"No Trigger", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_e1_filter = GCombo(widgetName:"gcombo_e1_filter", options:["No Filter","3 CCU8 Clock Cycles","5 CCU8 Clock Cycles","7 CCU8 Clock Cycles"], value:"No Filter", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_e2_fn = GCombo(widgetName:"gcombo_e2_fn", options:["No Event","External Start","External Stop","External Count Direction","External Gating","External Count","External Load","External Modulation","External Override (Level)","External Trap"], value:"No Event", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_e2_trigger = GCombo(widgetName:"gcombo_e2_trigger", options:["No Trigger","Rising","Falling","Both"], value:"No Trigger", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_e2_filter = GCombo(widgetName:"gcombo_e2_filter", options:["No Filter","3 CCU8 Clock Cycles","5 CCU8 Clock Cycles","7 CCU8 Clock Cycles"], value:"No Filter", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_ext_start_edge = GCombo(widgetName:"gcombo_ext_start_edge", options:["No Trigger","Rising","Falling","Both"], value:"No Trigger", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_ext_start_action = GCombo(widgetName:"gcombo_ext_start_action", options:["Start Timer","Clear And Start Timer"], value:"Start Timer", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_ext_stop_edge = GCombo(widgetName:"gcombo_ext_stop_edge", options:["No Trigger","Rising","Falling","Both"], value:"No Trigger", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_ext_stop_action = GCombo(widgetName:"gcombo_ext_stop_action", options:["Stop Timer","Clear Timer","Clear And Stop Timer"], value:"Stop Timer", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_ext_trap_level = GCombo(widgetName:"gcombo_ext_trap_level", options:["Active High","Active Low"], value:"Active High", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_ext_trap_sync = GCombo(widgetName:"gcombo_ext_trap_sync", options:["Disable","Enable"], value:"Enable", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_ext_trap_exit = GCombo(widgetName:"gcombo_ext_trap_exit", options:["Auto Exit","SW Exit"], value:"Auto Exit", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_ext_load_edge = GCombo(widgetName:"gcombo_ext_load_edge", options:["No Trigger","Rising","Falling","Both"], value:"No Trigger", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_ext_count_edge = GCombo(widgetName:"gcombo_ext_count_edge", options:["No Trigger","Rising","Falling","Both"], value:"No Trigger", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_ext_e1_override_edge = GCombo(widgetName:"gcombo_ext_e1_override_edge", options:["No Trigger","Rising","Falling","Both"], value:"No Trigger", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_ext_gate_level = GCombo(widgetName:"gcombo_ext_gate_level", options:["Active On High Level","Active On Low Level"], value:"Active On High Level", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_ext_count_dir_level = GCombo(widgetName:"gcombo_ext_count_dir_level", options:["Count Up On Low Level","Count Up On High Level"], value:"Count Up On Low Level", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_ext_e2_override_level = GCombo(widgetName:"gcombo_ext_e2_override_level", options:["No Inversion","Inversion"], value:"No Inversion", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_ext_mod_level = GCombo(widgetName:"gcombo_ext_mod_level", options:["Active On High Level","Active On Low Level"], value:"Active On High Level", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_ext_mod_sync = GCombo(widgetName:"gcombo_ext_mod_sync", options:["Not Synchronized","Synchronized"], value:"Not Synchronized", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_ext_mod_mode = GCombo(widgetName:"gcombo_ext_mod_mode", options:["Clear The CC8yST","Gating The Outputs"], value:"Clear The CC8yST", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_hr_out0_char = GCombo(widgetName:"gcombo_hr_out0_char", options:["Push Pull","Open Drain"], value:"Push Pull", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_hr_out0_strng = GCombo(widgetName:"gcombo_hr_out0_strng", options:["Weak Driver","Medium Driver","Strong Driver Soft Edge","Strong Driver Slow Edge","Strong Driver Sharp Edge","Strong Driver Medium Edge"], value:"Strong Driver Sharp Edge", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_hr_out1_char = GCombo(widgetName:"gcombo_hr_out1_char", options:["Push Pull","Open Drain"], value:"Push Pull", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_hr_out1_strng = GCombo(widgetName:"gcombo_hr_out1_strng", options:["Weak Driver","Medium Driver","Strong Driver Soft Edge","Strong Driver Slow Edge","Strong Driver Sharp Edge","Strong Driver Medium Edge"], value:"Strong Driver Sharp Edge", enabled:true, visible:true, isMandatoryValue:false)
	 gfloat_clock = GFloat(widgetName:"gfloat_clock", value:100, minValue:80, maxValue:180, enabled:true, visible:true, isMandatoryValue:false)
	 gfloat_act_res = GFloat(widgetName:"gfloat_act_res", value:150, minValue:150, maxValue:150, enabled:false, visible:true, isMandatoryValue:false)
	 gfloat_act_freq = GFloat(widgetName:"gfloat_act_freq", value:1500, minValue:0, maxValue:120000000, enabled:true, visible:true, isMandatoryValue:false)
	 gfloat_act_duty = GFloat(widgetName:"gfloat_act_duty", value:50, minValue:0, maxValue:100, enabled:true, visible:true, isMandatoryValue:false)
	 gfloat_hr_dt_rise = GFloat(widgetName:"gfloat_hr_dt_rise", value:0.0, minValue:0.0, maxValue:Double.POSITIVE_INFINITY, enabled:true, visible:true, isMandatoryValue:false)
	 gfloat_hr_dt_fall = GFloat(widgetName:"gfloat_hr_dt_fall", value:0.0, minValue:0.0, maxValue:Double.POSITIVE_INFINITY, enabled:true, visible:true, isMandatoryValue:false)
	 gcheck_init_start = GCheck(widgetName:"gcheck_init_start", value:false, enabled:true, visible:true)
	 gcheck_single_shot = GCheck(widgetName:"gcheck_single_shot", value:false, enabled:true, visible:true)
	 gcheck_hr_enable = GCheck(widgetName:"gcheck_hr_enable", value:true, enabled:true, visible:true)
	 gcheck_lr_enable = GCheck(widgetName:"gcheck_lr_enable", value:false, enabled:true, visible:true)
	 gcheck_hr_dt_enable = GCheck(widgetName:"gcheck_hr_dt_enable", value:false, enabled:true, visible:true)
	 gcheck_hr_out0_trap = GCheck(widgetName:"gcheck_hr_out0_trap", value:false, enabled:true, visible:true)
	 gcheck_hr_out1_trap = GCheck(widgetName:"gcheck_hr_out1_trap", value:false, enabled:true, visible:true)
	 gcheck_sync_start = GCheck(widgetName:"gcheck_sync_start", value:false, enabled:true, visible:true)
	 gcheck_ext_trap = GCheck(widgetName:"gcheck_ext_trap", value:false, enabled:true, visible:true)
	 gcheck_int_per_match = GCheck(widgetName:"gcheck_int_per_match", value:false, enabled:true, visible:true)
	 gcheck_int_one_match_down = GCheck(widgetName:"gcheck_int_one_match_down", value:false, enabled:true, visible:true)
	 gcheck_int_cmp1_match_up = GCheck(widgetName:"gcheck_int_cmp1_match_up", value:false, enabled:true, visible:true)
	 gcheck_int_cmp1_match_down = GCheck(widgetName:"gcheck_int_cmp1_match_down", value:false, enabled:true, visible:true)
	 gcheck_int_cmp2_match_up = GCheck(widgetName:"gcheck_int_cmp2_match_up", value:false, enabled:true, visible:true)
	 gcheck_int_cmp2_match_down = GCheck(widgetName:"gcheck_int_cmp2_match_down", value:false, enabled:true, visible:true)
	 gcheck_int_e0 = GCheck(widgetName:"gcheck_int_e0", value:false, enabled:true, visible:true)
	 gcheck_int_e1 = GCheck(widgetName:"gcheck_int_e1", value:false, enabled:true, visible:true)
	 gcheck_int_e2 = GCheck(widgetName:"gcheck_int_e2", value:false, enabled:true, visible:true)
	 gcheck_hr_out0_enable = GCheck(widgetName:"gcheck_hr_out0_enable", value:false, enabled:true, visible:true)
	 gcheck_hr_out1_enable = GCheck(widgetName:"gcheck_hr_out1_enable", value:false, enabled:true, visible:true)
	 gLabel378 = GLabel(widgetName:"gLabel378", text:"  ", enabled:true, visible:true)
	 glabel_image_note = GLabel(widgetName:"glabel_image_note", text:"Note: The PWM scheme provided in the above picture is valid only for default UI\r\n           configuration. Inversions might happen depending on user selections.\r\n", enabled:true, visible:true)
	 ggroup_duty = GGroup(widgetName:"ggroup_duty", text:"Asymmetric", enabled:true, visible:true)
	 ggroup_image = GGroup(widgetName:"ggroup_image", text:"", enabled:true, visible:true)
	 ggroup_hr_dt = GGroup(widgetName:"ggroup_hr_dt", text:"Dead Time", enabled:true, visible:true)
	 ggroup_event0 = GGroup(widgetName:"ggroup_event0", text:"Event 0", enabled:true, visible:true)
	 ggroup_event1 = GGroup(widgetName:"ggroup_event1", text:"Event 1", enabled:true, visible:true)
	 ggroup_event2 = GGroup(widgetName:"ggroup_event2", text:"Event 2", enabled:true, visible:true)
	 ggroup_ext_start = GGroup(widgetName:"ggroup_ext_start", text:"External Start", enabled:true, visible:true)
	 ggroup_ext_stop = GGroup(widgetName:"ggroup_ext_stop", text:"External Stop", enabled:true, visible:true)
	 ggroup_ext_trap = GGroup(widgetName:"ggroup_ext_trap", text:"Trap", enabled:true, visible:true)
	 ggroup_ext_load = GGroup(widgetName:"ggroup_ext_load", text:"External Load", enabled:true, visible:true)
	 ggroup_ext_count = GGroup(widgetName:"ggroup_ext_count", text:"External Counting", enabled:true, visible:true)
	 ggroup_ext_e1_override = GGroup(widgetName:"ggroup_ext_e1_override", text:"External Override (Event 1)", enabled:true, visible:true)
	 ggroup_ext_gate = GGroup(widgetName:"ggroup_ext_gate", text:"External Gating", enabled:true, visible:true)
	 ggroup_ext_count_dir = GGroup(widgetName:"ggroup_ext_count_dir", text:"External Counting Direction", enabled:true, visible:true)
	 ggroup_ext_e2_override = GGroup(widgetName:"ggroup_ext_e2_override", text:"External Override (Event 2)", enabled:true, visible:true)
	 ggroup_ext_mod = GGroup(widgetName:"ggroup_ext_mod", text:"External Modulation", enabled:true, visible:true)
	 ggroup_166 = GGroup(widgetName:"ggroup_166", text:"", enabled:true, visible:true)
	 ggroup_hr_out0_setting = GGroup(widgetName:"ggroup_hr_out0_setting", text:"HRC Direct Output Settings", enabled:true, visible:true)
	 ggroup_hr_out1_setting = GGroup(widgetName:"ggroup_hr_out1_setting", text:"HRC  Inverted Output Settings", enabled:true, visible:true)
	 gmessage_clock = GMessage(widgetName:"gmessage_clock", text:"Valid clock values are 80MHz, 120MHz and 180MHz", isError:false, visible:true)


	 }
	/* End : UI variable section */
}
