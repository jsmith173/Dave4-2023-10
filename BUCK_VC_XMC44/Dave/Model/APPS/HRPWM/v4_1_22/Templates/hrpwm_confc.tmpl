package Model.APPS.HRPWM.v4_1_22.Templates;

import Model.APPS.HRPWM.v4_1_22.HRPWM

out.print("""
/**
 * @cond
 ***********************************************************************************************************************
 *
 * Copyright (c) 2015 - 2020, Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following
 *   disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
 *   disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes
 * with Infineon Technologies AG (dave@infineon.com).
 ***********************************************************************************************************************
 *
 * Change History
 * --------------
 *
 * 2015-02-14:
 *     - Initial version for DAVEv4

 * 2015-06-20:
 *     - Copyright information updated.
 * @endcond
 *
 */

/***********************************************************************************************************************
 * HEADER FILES
 **********************************************************************************************************************/
#include "hrpwm.h"

/**********************************************************************************************************************
* DATA STRUCTURES
**********************************************************************************************************************/
""");

Integer HRPWM_DUTY_BIT_RES     = 31
Integer HRPWM_DUTY_FULL_SCALE  = 2147483648 /*2^31*/
Integer HRPWM_DUTY_SCALE       = 21474836 /*2^31/100*/

List      MappedUri                 = null;
String    appInst                   = null;
String    KernelNo                  = null;
String    SliceNo                   = null;
String    CCU8_Global_Handle        = null;
String    HRPWM_Global_Handle       = null;
String    KernRegs_Handle           = null;
String    Slice_Handle              = null;
String    Dynamic_Handle            = null;
String    shadow_txfr_msk           = 0;
String    dither_shadow_txfr_msk    = 0;
String    prescaler_shadow_txfr_msk = 0;

String  counting_mode               = null;
String  asymmetric                  = null;
String  start_control               = null;
String  single_shot                 = null;
String  slice_status                = null;

String    ch1_out0_state            = null;
String    ch1_out1_state            = null;
String    ch2_out2_state            = null;
String    ch2_out3_state            = null;
        
String    ch1_out0_pass_level       = null;
String    ch1_out1_pass_level       = null;
String    ch2_out2_pass_level       = null;
String    ch2_out3_pass_level       = null;

String    ch1_out0_enable           = null;
String    ch1_out0_port             = null;
String    ch1_out0_pin              = null;
String    ch1_out0_iocr_pcr         = null;
String    ch1_out0_iocr_oe          = null;
String    ch1_out0_hwsel_hw         = null;
String    ch1_out0_pdisc_pdis       = null;
String    ch1_out0_mode             = null;
String    ch1_out0_ptr              = null;
String    ch1_out0_config           = null;
String    ch1_out0_output_strength  = null;

String    ch1_out1_enable           = null;
String    ch1_out1_port             = null;
String    ch1_out1_pin              = null;
String    ch1_out1_iocr_pcr         = null;
String    ch1_out1_iocr_oe          = null;
String    ch1_out1_hwsel_hw         = null;
String    ch1_out1_pdisc_pdis       = null;
String    ch1_out1_mode             = null;
String    ch1_out1_ptr              = null;
String    ch1_out1_config           = null;
String    ch1_out1_output_strength  = null;

String    ch2_out2_enable           = null;
String    ch2_out2_port             = null;
String    ch2_out2_pin              = null;
String    ch2_out2_iocr_pcr         = null;
String    ch2_out2_iocr_oe          = null;
String    ch2_out2_hwsel_hw         = null;
String    ch2_out2_pdisc_pdis       = null;
String    ch2_out2_mode             = null;
String    ch2_out2_ptr              = null;
String    ch2_out2_config           = null;
String    ch2_out2_output_strength  = null;

String    ch2_out3_enable           = null;
String    ch2_out3_port             = null;
String    ch2_out3_pin              = null;
String    ch2_out3_iocr_pcr         = null;
String    ch2_out3_iocr_oe          = null;
String    ch2_out3_hwsel_hw         = null;
String    ch2_out3_pdisc_pdis       = null;
String    ch2_out3_mode             = null;
String    ch2_out3_ptr              = null;
String    ch2_out3_config           = null;
String    ch2_out3_output_strength  = null;

String    hr_out0_enable            = null;
String    hr_out0_port              = null;
String    hr_out0_pin               = null;
String    hr_out0_iocr_pcr          = null;
String    hr_out0_iocr_oe           = null;
String    hr_out0_hwsel_hw          = null;
String    hr_out0_pdisc_pdis        = null;
String    hr_out0_mode              = null;
String    hr_out0_ptr               = null;
String    hr_out0_config            = null;
String    hr_out0_output_strength   = null;

String    hr_out1_enable            = null;
String    hr_out1_port              = null;
String    hr_out1_pin               = null;
String    hr_out1_iocr_pcr          = null;
String    hr_out1_iocr_oe           = null;
String    hr_out1_hwsel_hw          = null;
String    hr_out1_pdisc_pdis        = null;
String    hr_out1_mode              = null;
String    hr_out1_ptr               = null;
String    hr_out1_config            = null;
String    hr_out1_output_strength   = null;

String    int_per_match             = null;
String    int_cmp1_match_up         = null;
String    int_cmp1_match_down       = null;
String    int_cmp2_match_up         = null;
String    int_cmp2_match_down       = null;
String    int_one_match_down        = null;
String    int_e0                    = null;
String    int_e1                    = null;
String    int_e2                    = null;
        
String    sr_per_match              = null;
String    sr_cmp1_match_up          = null;
String    sr_cmp1_match_down        = null;
String    sr_cmp2_match_up          = null;
String    sr_cmp2_match_down        = null;
String    sr_one_match_down         = null;
String    sr_e0                     = null;
String    sr_e1                     = null;
String    sr_e2                     = null;

String    e0_mapped_input           = null;
String    e1_mapped_input           = null;
String    e2_mapped_input           = null;

String    e0_filter                 = null;
String    e1_filter                 = null;
String    e2_filter                 = null;

String    e0_edge                   = null;
String    e1_edge                   = null;
String    e2_edge                   = null;

String    e0_level                  = null;
String    e1_level                  = null;
String    e2_level                  = null;

String ext_start_event              = null;
String ext_start_mode               = null;
String ext_stop_event               = null;
String ext_stop_mode                = null;
String ext_count_dir_event          = null;
String ext_gate_event               = null;
String ext_count_event              = null;
String ext_load_event               = null;
String ext_mod_event                = null;
String ext_mod_mode                 = null;
String ext_mod_sync                 = null;
String ext_override_edge_event      = null;
String ext_override_level_event     = null;
String ext_trap_enable              = null;
String ext_trap_event               = null;
String ext_trap_sync                = null;
String ext_trap_exit                = null;

Integer period                      = null;
Integer compare1_value              = null;
Integer compare2_value              = null;
Integer prescaler                   = null;
Integer sym_cmp_ch1                 = null;
Integer sym_cmp_ch2                 = null;
Integer sym_hr_cmp1                 = null;
Integer sym_hr_cmp2                 = null;
Integer asym_cmp_ch1                = null;
Integer asym_cmp_ch2                = null;
Integer asym_hr_cmp1                = null;
Integer asym_hr_cmp2                = null;

String  sym_duty1                   = 0.0;
String  sym_duty2                   = 0.0;
String  asym_duty                   = 0.0;
String  asym_shift                  = 0.0;

String dt_ch1_enable                = null;
String dt_ch2_enable                = null;
Double dt_clock_nsec                = 0;
Integer dt_ch1_rise                 = null;
Integer dt_ch1_fall                 = null;
Integer dt_ch2_rise                 = null;
Integer dt_ch2_fall                 = null;
String  dt_div                      = null;

String dither_period                = null;
String dither_duty                  = null;

Integer dt_hrpwm_rise               = null;
Integer dt_hrpwm_fall               = null;
Integer hr_cr1                      = null;
Integer hr_cr2                      = null;
Integer hr_cr_max                   = 54;

Boolean dither_enable               = null;
Integer dither_mode                 = null;
Integer dither_cmp                  = null;

Integer mcm_ch1_enable              = null;
Integer mcm_ch2_enable              = null;
String  mcm_shadow_txfr             = null;
String  mcm_action                  = null;

Boolean prescaler_enable            = null;
String  prescaler_mode              = null;
Integer prescaler_flt_val           = null;

Boolean sync_start                  = null;
Boolean high_res_module             = null;

String hrpwm_module_enabled         = null;
String hrc_channel_config           = null;
String hrc_src_config0              = null;
String hrc_src_config1              = null;
String hrpwm_hr_path_enable         = null;
String hrpwm_lr_path_enable         = null;
String hrpwm_hr_path_enable_mask    = null;
String hrpwm_lr_path_enable_mask    = null;
String hr_shadow_transfer_msk       = null;
String hr_dt_transfer_msk           = null;
String hrc_slice_ptr                = null;
String hrc_channel_no               = null;
String hrc_dt_enable                = null;
String hrc_out0_trap_enable         = null;
String hrc_out0_pass_level          = null;
String hrc_out0_conn                = null;
String hrc_out0_enable              = null;

String hrc_out1_trap_enable         = null;
String hrc_out1_pass_level          = null;
String hrc_out1_conn                = null;
String hrc_out1_enable              = null;

String hrc_high_res_mode0           = null;
String hrc_set_config0              = null;
String hrc_clear_config0            = null;
String hrc_comparator_set0          = null;
String hrc_comparator_clear0        = null;
String hrc_timer_sel0               = null;
String hrc_set_edge_config0         = null;
String hrc_clear_edge_config0       = null;
String hrc_src_trap_enable0         = null;

String hrc_high_res_mode1           = null;
String hrc_set_config1              = null;
String hrc_clear_config1            = null;
String hrc_comparator_set1          = null;
String hrc_comparator_clear1        = null;
String hrc_timer_sel1               = null;
String hrc_set_edge_config1         = null;
String hrc_clear_edge_config1       = null;
String hrc_src_trap_enable1         = null;

List timer_repeat_array =[
    'XMC_CCU8_SLICE_TIMER_REPEAT_MODE_REPEAT',
    'XMC_CCU8_SLICE_TIMER_REPEAT_MODE_SINGLE'
    ];
List event_edge_array = [
    'XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_NONE',
    'XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE',
    'XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_FALLING_EDGE',
    'XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_DUAL_EDGE'
];

List event_level_array = [
    'XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH',
    'XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW',
];

List action_extstart_array = [
    'XMC_CCU8_SLICE_START_MODE_TIMER_START',
    'XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR'
];

List action_extstop_array = [
    'XMC_CCU8_SLICE_END_MODE_TIMER_STOP',
    'XMC_CCU8_SLICE_END_MODE_TIMER_CLEAR',
    'XMC_CCU8_SLICE_END_MODE_TIMER_STOP_CLEAR'
];

List trap_exit_array = [
    'XMC_CCU8_SLICE_TRAP_EXIT_MODE_AUTOMATIC',
    'XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW'
];
List trap_level_array = [
    'XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW',
    'XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH'
];

List Input_array = [
    
    'XMC_CCU8_SLICE_INPUT_A',
    'XMC_CCU8_SLICE_INPUT_B',
    'XMC_CCU8_SLICE_INPUT_C',
    'XMC_CCU8_SLICE_INPUT_D',
    'XMC_CCU8_SLICE_INPUT_E',
    'XMC_CCU8_SLICE_INPUT_F',
    'XMC_CCU8_SLICE_INPUT_G',
    'XMC_CCU8_SLICE_INPUT_H',
    'XMC_CCU8_SLICE_INPUT_I',
    'XMC_CCU8_SLICE_INPUT_J',
    'XMC_CCU8_SLICE_INPUT_K',
    'XMC_CCU8_SLICE_INPUT_L',
    'XMC_CCU8_SLICE_INPUT_M',
    'XMC_CCU8_SLICE_INPUT_N',
    'XMC_CCU8_SLICE_INPUT_O',
    'XMC_CCU8_SLICE_INPUT_P'
];

List counting_mode_array =       [
  'XMC_CCU8_SLICE_TIMER_COUNT_MODE_EA',
  'XMC_CCU8_SLICE_TIMER_COUNT_MODE_CA',
];

List passivelvl_array =   [
    'XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_LOW',
    'XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_HIGH',
];

List SrId_array =           [
    'XMC_CCU8_SLICE_SR_ID_0',
    'XMC_CCU8_SLICE_SR_ID_1',
    'XMC_CCU8_SLICE_SR_ID_2',
    'XMC_CCU8_SLICE_SR_ID_3',
];

event_filter_array = [
  'XMC_CCU8_SLICE_EVENT_FILTER_DISABLED',
  'XMC_CCU8_SLICE_EVENT_FILTER_3_CYCLES',
  'XMC_CCU8_SLICE_EVENT_FILTER_5_CYCLES',
  'XMC_CCU8_SLICE_EVENT_FILTER_7_CYCLES',
];

external_start_mode_array = [
    'XMC_CCU8_SLICE_START_MODE_TIMER_START',
    'XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR',
];
external_stop_mode_array = [
    'XMC_CCU8_SLICE_END_MODE_TIMER_STOP',
    'XMC_CCU8_SLICE_END_MODE_TIMER_CLEAR',
    'XMC_CCU8_SLICE_END_MODE_TIMER_STOP_CLEAR',
];
external_mod_mode_array = [
    'XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_ST_OUT',
    'XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT',
];


mcms_action_array = [
  'XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR',
  'XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP',
  'XMC_CCU8_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP_DIT',
 ];

prescaler_mode_array = [
      'XMC_CCU8_SLICE_PRESCALER_MODE_NORMAL',
      'XMC_CCU8_SLICE_PRESCALER_MODE_FLOAT'
 ];

List slice_status_array = [
    'XMC_CCU8_SLICE_STATUS_CHANNEL_1',
    'XMC_CCU8_SLICE_STATUS_CHANNEL_2',
    'XMC_CCU8_SLICE_STATUS_CHANNEL_1_AND_2'];

List gpio_mode_array = [
    'XMC_GPIO_MODE_INPUT',
    'XMC_GPIO_MODE_INPUT_PULL_UP',
    'XMC_GPIO_MODE_INPUT_PULL_DOWN',
    'XMC_GPIO_MODE_INPUT_SAMPLING',
    'XMC_GPIO_MODE_INPUT_INVERTED_TRISTATE',
    'XMC_GPIO_MODE_INPUT_INVERTED_PULL_UP',
    'XMC_GPIO_MODE_INPUT_INVERTED_PULL_DOWN',
    'XMC_GPIO_MODE_INPUT_INVERTED_SAMPLING',
    'XMC_GPIO_MODE_OUTPUT_PUSH_PULL',
    'XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1',
    'XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT2',
    'XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT3',
    'XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4',
    'XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT5',
    'XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT6',
    'XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT7',
    'XMC_GPIO_MODE_OUTPUT_OPEN_DRAIN',
    'XMC_GPIO_MODE_OUTPUT_OPEN_DRAIN_ALT1',
    'XMC_GPIO_MODE_OUTPUT_OPEN_DRAIN_ALT2',
    'XMC_GPIO_MODE_OUTPUT_OPEN_DRAIN_ALT3',
    'XMC_GPIO_MODE_OUTPUT_OPEN_DRAIN_ALT4',
    'XMC_GPIO_MODE_OUTPUT_OPEN_DRAIN_ALT5',
    'XMC_GPIO_MODE_OUTPUT_OPEN_DRAIN_ALT6',
    'XMC_GPIO_MODE_OUTPUT_OPEN_DRAIN_ALT7'
    ];

List gpio_output_strength = [
    'XMC_GPIO_OUTPUT_STRENGTH_WEAK',
    'XMC_GPIO_OUTPUT_STRENGTH_MEDIUM',
    'XMC_GPIO_OUTPUT_STRENGTH_STRONG_SOFT_EDGE',
    'XMC_GPIO_OUTPUT_STRENGTH_STRONG_SLOW_EDGE',
    'XMC_GPIO_OUTPUT_STRENGTH_STRONG_SHARP_EDGE',
    'XMC_GPIO_OUTPUT_STRENGTH_STRONG_MEDIUM_EDGE',
    ];


List dtc_div_array = [
    'XMC_CCU8_SLICE_DTC_DIV_1',
    'XMC_CCU8_SLICE_DTC_DIV_2',
    'XMC_CCU8_SLICE_DTC_DIV_4',
    'XMC_CCU8_SLICE_DTC_DIV_8',
    'XMC_CCU8_SLICE_DTC_DIV_MAX'
];

List shadow_tx_array =[
    
    'XMC_CCU8_SHADOW_TRANSFER_SLICE_0',
    'XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_0',
    'XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_0',
    'XMC_CCU8_SHADOW_TRANSFER_SLICE_1',
    'XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_1',
    'XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_1',
    'XMC_CCU8_SHADOW_TRANSFER_SLICE_2',
    'XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_2',
    'XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_2',
    'XMC_CCU8_SHADOW_TRANSFER_SLICE_3',
    'XMC_CCU8_SHADOW_TRANSFER_DITHER_SLICE_3',
    'XMC_CCU8_SHADOW_TRANSFER_PRESCALER_SLICE_3'                                                                        
  
];


List hrc_channel_array = [
    'HRPWM0_HRC0',
    'HRPWM0_HRC1',
    'HRPWM0_HRC2',
    'HRPWM0_HRC3'
];

List hr_enable_array =[
    'XMC_HRPWM_HR_PATH_HRC0',
    'XMC_HRPWM_HR_PATH_HRC1',
    'XMC_HRPWM_HR_PATH_HRC2',
    'XMC_HRPWM_HR_PATH_HRC3',
    ];
List lr_enable_array =[
    'XMC_HRPWM_LR_PATH_HRC0',
    'XMC_HRPWM_LR_PATH_HRC1',
    'XMC_HRPWM_LR_PATH_HRC2',
    'XMC_HRPWM_LR_PATH_HRC3',
    ];
List hrpwm_func_status_array = [
    'XMC_HRPWM_FUNC_STATUS_DISABLE',
    'XMC_HRPWM_FUNC_STATUS_ENABLE'];

List hrc_pass_level_array = [  
    'XMC_HRPWM_HRC_OUT_PASSIVE_LOW',
    'XMC_HRPWM_HRC_OUT_PASSIVE_HIGH'
];

List hrc_edge_array = [
    'XMC_HRPWM_HRC_HR_EDGE_SEL_RISING',
    'XMC_HRPWM_HRC_HR_EDGE_SEL_FALLING',
    'XMC_HRPWM_HRC_HR_EDGE_SEL_BOTH',
    'XMC_HRPWM_HRC_HR_EDGE_SEL_NONE' 
 ];

List hrc_input_array = [
    'XMC_HRPWM_HRC_SRC_INPUT_CCU',
    'XMC_HRPWM_HRC_SRC_INPUT_CSG'
];
List hrc_cmp_sel_array = [
    'XMC_HRPWM_HRC_CMP_SEL_CSG0',
    'XMC_HRPWM_HRC_CMP_SEL_CSG1',
    'XMC_HRPWM_HRC_CMP_SEL_CSG2'
];

List hrc_ch_timer_sel_array = [  
    'XMC_HRPWM_HRC_TIMER_SEL_CCU_CC0',
    'XMC_HRPWM_HRC_TIMER_SEL_CCU_CC1',
    'XMC_HRPWM_HRC_TIMER_SEL_CCU_CC2',
    'XMC_HRPWM_HRC_TIMER_SEL_CCU_CC3'
];

List hrc_src_edge_array = [  
    'XMC_HRPWM_HRC_SRC_EDGE_SEL_DISABLED',
    'XMC_HRPWM_HRC_SRC_EDGE_SEL_RISING',
    'XMC_HRPWM_HRC_SRC_EDGE_SEL_FALLING',
    'XMC_HRPWM_HRC_SRC_EDGE_SEL_BOTH' 
 ];

List hrc_shadow_tx_array = [
  'XMC_HRPWM_HRC_SHADOW_TX_HRC0_VALUE',
  'XMC_HRPWM_HRC_SHADOW_TX_HRC0_DT_VALUE',
  'XMC_HRPWM_HRC_SHADOW_TX_HRC1_VALUE',
  'XMC_HRPWM_HRC_SHADOW_TX_HRC1_DT_VALUE',
  'XMC_HRPWM_HRC_SHADOW_TX_HRC2_VALUE',
  'XMC_HRPWM_HRC_SHADOW_TX_HRC2_DT_VALUE',
  'XMC_HRPWM_HRC_SHADOW_TX_HRC3_VALUE',
  'XMC_HRPWM_HRC_SHADOW_TX_HRC3_DT_VALUE'
 ];
List boolArray = ['false', 'true'];

/*************************/
for (HRPWM appIns : appInstancesList  ) {
    
      appInst = appIns.getInstanceLabel()
      MappedUri = appIns.hwres_ccu8_cc8_slice.getSolverUri()
    
      
      if (MappedUri != null) {
          
          KernelNo            = MappedUri[4]
          SliceNo             = MappedUri[6]
          CCU8_Global_Handle  = "(GLOBAL_CCU8_t*) &"  + appIns.hrpwm_app_global_ccu8_cc8.getInstanceLabel();
          KernRegs_Handle     = "(XMC_CCU8_MODULE_t*) CCU8"  + KernelNo  + "_BASE";
          Slice_Handle        = "(XMC_CCU8_SLICE_t*) CCU8"     + KernelNo  + "_CC8" + appIns.hwres_ccu8_cc8_slice.getSolverUri().getAt(6);
          Dynamic_Handle      = "&" + appInst +"_DynamicHandle";
          shadow_txfr_msk           = shadow_tx_array[((appIns.hwres_ccu8_cc8_slice.getSolverUri().getAt(6).toInteger() * 3) + 0)];
          dither_shadow_txfr_msk    = shadow_tx_array[((appIns.hwres_ccu8_cc8_slice.getSolverUri().getAt(6).toInteger() * 3) + 1)];
          prescaler_shadow_txfr_msk = shadow_tx_array[((appIns.hwres_ccu8_cc8_slice.getSolverUri().getAt(6).toInteger() * 3) + 2)];

          HRPWM_Global_Handle = "(GLOBAL_HRPWM_t*) &" + appIns.hrpwm_app_global_hrpwm.getInstanceLabel();

          
          period              = appIns.ginteger_period.value
          prescaler           = appIns.ginteger_prescaler.value 
          
          if(appIns.gcombo_compare_mode.value == "Symmetric"){
              sym_duty1       = appIns.gfloat_act_duty.value.toString();
              sym_duty2       = 0.0;
          }
          else{
              asym_duty       = appIns.gfloat_act_duty.value.toString();
              asym_shift      = appIns.gfloat_asym_act_shift.value.toString();
          }
          
          start_control       = appIns.gcheck_init_start.value
          single_shot         = timer_repeat_array[boolArray.indexOf(appIns.gcheck_single_shot.value.toString())];
          
          sync_start          = appIns.gcheck_sync_start.value
          high_res_module     = true;
          
          counting_mode       = counting_mode_array[(Integer)appIns.gcombo_counting_mode.options.indexOf(appIns.gcombo_counting_mode.value)];
          asymmetric          = appIns.gcombo_compare_mode.options.indexOf(appIns.gcombo_compare_mode.value)
          
//          if(appIns.gcombo_status_bit.enabled){
//          slice_status        = slice_status_array[(Integer)(appIns.gcombo_status_bit.options.indexOf(appIns.gcombo_status_bit.value))]
//          }
//          else{
//          slice_status        = slice_status_array[0]
//          }          
          slice_status        = slice_status_array[0]
          
          sym_cmp_ch1         = appIns.ginteger_cmp_ch1.value
          sym_cmp_ch2         = appIns.ginteger_cmp_ch2.value
          
          asym_cmp_ch1        = appIns.ginteger_cmp_ch1.value
          asym_cmp_ch2        = appIns.ginteger_cmp_ch2.value

          if(appIns.gcombo_compare_mode.value == "Symmetric"){compare1_value = sym_cmp_ch1} else {compare1_value = asym_cmp_ch1}
          if(appIns.gcombo_compare_mode.value == "Symmetric"){compare2_value = sym_cmp_ch2} else {compare2_value = asym_cmp_ch2}

          ch1_out0_state      = 0;
          ch1_out1_state      = 0;
          ch2_out2_state      = 0;
          ch2_out3_state      = 0;

          ch1_out0_pass_level = passivelvl_array[0]
          ch1_out1_pass_level = passivelvl_array[0]
          ch2_out2_pass_level = passivelvl_array[0]
          ch2_out3_pass_level = passivelvl_array[0]
          
          
          int_per_match       = appIns.gcheck_int_per_match.value       & appIns.gcheck_int_per_match.enabled;
          int_cmp1_match_up   = appIns.gcheck_int_cmp1_match_up.value   & appIns.gcheck_int_cmp1_match_up.enabled
          int_cmp1_match_down = appIns.gcheck_int_cmp1_match_down.value & appIns.gcheck_int_cmp1_match_down.enabled
          int_cmp2_match_up   = appIns.gcheck_int_cmp2_match_up.value   & appIns.gcheck_int_cmp2_match_up.enabled
          int_cmp2_match_down = appIns.gcheck_int_cmp2_match_down.value & appIns.gcheck_int_cmp2_match_down.enabled
          int_one_match_down  = appIns.gcheck_int_one_match_down.value  & appIns.gcheck_int_one_match_down.enabled
          int_e0              = appIns.gcheck_int_e0.value              & appIns.gcheck_int_e0.enabled
          int_e1              = appIns.gcheck_int_e1.value              & appIns.gcheck_int_e1.enabled
          int_e2              = appIns.gcheck_int_e2.value              & appIns.gcheck_int_e2.enabled

          sr_per_match        = SrId_array[(int)appIns.hwres_ccu8_cc8_slice.getRegValue("srs","srs_posr")]
          sr_cmp1_match_up    = SrId_array[(int)appIns.hwres_ccu8_cc8_slice.getRegValue("srs","srs_cm1sr")]
          sr_cmp1_match_down  = SrId_array[(int)appIns.hwres_ccu8_cc8_slice.getRegValue("srs","srs_cm1sr")]
          sr_cmp2_match_up    = SrId_array[(int)appIns.hwres_ccu8_cc8_slice.getRegValue("srs","srs_cm2sr")]
          sr_cmp2_match_down  = SrId_array[(int)appIns.hwres_ccu8_cc8_slice.getRegValue("srs","srs_cm2sr")]
          sr_one_match_down   = SrId_array[(int)appIns.hwres_ccu8_cc8_slice.getRegValue("srs","srs_posr")]
          sr_e0               = SrId_array[(int)appIns.hwres_ccu8_cc8_slice.getRegValue("srs","srs_e0sr")]
          sr_e1               = SrId_array[(int)appIns.hwres_ccu8_cc8_slice.getRegValue("srs","srs_e1sr")]
          sr_e2               = SrId_array[(int)appIns.hwres_ccu8_cc8_slice.getRegValue("srs","srs_e2sr")]

          
          e0_mapped_input     = Input_array[(int)appIns.hwres_ccu8_cc8_slice.getRegValue("ins","ins_ev0is")]
          e1_mapped_input     = Input_array[(int)appIns.hwres_ccu8_cc8_slice.getRegValue("ins","ins_ev1is")]
          e2_mapped_input     = Input_array[(int)appIns.hwres_ccu8_cc8_slice.getRegValue("ins","ins_ev2is")]
          
          e0_filter           = event_filter_array[appIns.gcombo_e0_filter.options.indexOf(appIns.gcombo_e0_filter.value)]
          e1_filter           = event_filter_array[appIns.gcombo_e1_filter.options.indexOf(appIns.gcombo_e1_filter.value)]
          e2_filter           = event_filter_array[appIns.gcombo_e2_filter.options.indexOf(appIns.gcombo_e2_filter.value)]
          
          
          
          if(appIns.gcombo_e0_fn.value == "No Event")                  {e0_edge = "XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_NONE"}
          if(appIns.gcombo_e0_fn.value == "External Start")            {e0_edge = event_edge_array[appIns.gcombo_ext_start_edge.options.indexOf(appIns.gcombo_ext_start_edge.value)]}
          if(appIns.gcombo_e0_fn.value == "External Stop")             {e0_edge = event_edge_array[appIns.gcombo_ext_stop_edge.options.indexOf(appIns.gcombo_ext_stop_edge.value)]}
          if(appIns.gcombo_e0_fn.value == "External Count Direction")  {e0_edge = event_edge_array[appIns.gcombo_e0_trigger.options.indexOf(appIns.gcombo_e0_trigger.value)]}
          if(appIns.gcombo_e0_fn.value == "External Gating")           {e0_edge = event_edge_array[appIns.gcombo_e0_trigger.options.indexOf(appIns.gcombo_e0_trigger.value)]}
          if(appIns.gcombo_e0_fn.value == "External Count")            {e0_edge = event_edge_array[appIns.gcombo_ext_count_edge.options.indexOf(appIns.gcombo_ext_count_edge.value)]}
          if(appIns.gcombo_e0_fn.value == "External Load")             {e0_edge = event_edge_array[appIns.gcombo_ext_load_edge.options.indexOf(appIns.gcombo_ext_load_edge.value)]}
          if(appIns.gcombo_e0_fn.value == "External Modulation")       {e0_edge = event_edge_array[appIns.gcombo_e0_trigger.options.indexOf(appIns.gcombo_e0_trigger.value)]}
          if(appIns.gcombo_e0_fn.value == "External Start" && 
              appIns.gcheck_sync_start.value)                          {e0_edge = "XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE"}
          
          if(appIns.gcombo_e1_fn.value == "No Event")                  {e1_edge = "XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_NONE"}
          if(appIns.gcombo_e1_fn.value == "External Start")            {e1_edge = event_edge_array[appIns.gcombo_ext_start_edge.options.indexOf(appIns.gcombo_ext_start_edge.value)]}
          if(appIns.gcombo_e1_fn.value == "External Stop")             {e1_edge = event_edge_array[appIns.gcombo_ext_stop_edge.options.indexOf(appIns.gcombo_ext_stop_edge.value)]}
          if(appIns.gcombo_e1_fn.value == "External Count Direction")  {e1_edge = event_edge_array[appIns.gcombo_e1_trigger.options.indexOf(appIns.gcombo_e1_trigger.value)]}
          if(appIns.gcombo_e1_fn.value == "External Gating")           {e1_edge = event_edge_array[appIns.gcombo_e1_trigger.options.indexOf(appIns.gcombo_e1_trigger.value)]}
          if(appIns.gcombo_e1_fn.value == "External Count")            {e1_edge = event_edge_array[appIns.gcombo_ext_count_edge.options.indexOf(appIns.gcombo_ext_count_edge.value)]}
          if(appIns.gcombo_e1_fn.value == "External Load")             {e1_edge = event_edge_array[appIns.gcombo_ext_load_edge.options.indexOf(appIns.gcombo_ext_load_edge.value)]}
          if(appIns.gcombo_e1_fn.value == "External Modulation")       {e1_edge = event_edge_array[appIns.gcombo_e1_trigger.options.indexOf(appIns.gcombo_e1_trigger.value)]}
          if(appIns.gcombo_e1_fn.value == "External Override (Edge)")  {e1_edge = event_edge_array[appIns.gcombo_ext_e1_override_edge.options.indexOf(appIns.gcombo_ext_e1_override_edge.value)]}
          if(appIns.gcombo_e1_fn.value == "External Start" &&
              appIns.gcheck_sync_start.value)                          {e1_edge = "XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE"}

          
          if(appIns.gcombo_e2_fn.value == "No Event")                  {e2_edge = "XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_NONE"}
          if(appIns.gcombo_e2_fn.value == "External Start")            {e2_edge = event_edge_array[appIns.gcombo_ext_start_edge.options.indexOf(appIns.gcombo_ext_start_edge.value)]}
          if(appIns.gcombo_e2_fn.value == "External Stop")             {e2_edge = event_edge_array[appIns.gcombo_ext_stop_edge.options.indexOf(appIns.gcombo_ext_stop_edge.value)]}
          if(appIns.gcombo_e2_fn.value == "External Count Direction")  {e2_edge = event_edge_array[appIns.gcombo_e2_trigger.options.indexOf(appIns.gcombo_e2_trigger.value)]}
          if(appIns.gcombo_e2_fn.value == "External Gating")           {e2_edge = event_edge_array[appIns.gcombo_e2_trigger.options.indexOf(appIns.gcombo_e2_trigger.value)]}
          if(appIns.gcombo_e2_fn.value == "External Count")            {e2_edge = event_edge_array[appIns.gcombo_ext_count_edge.options.indexOf(appIns.gcombo_ext_count_edge.value)]}
          if(appIns.gcombo_e2_fn.value == "External Load")             {e2_edge = event_edge_array[appIns.gcombo_ext_load_edge.options.indexOf(appIns.gcombo_ext_load_edge.value)]}
          if(appIns.gcombo_e2_fn.value == "External Modulation")       {e2_edge = event_edge_array[appIns.gcombo_e2_trigger.options.indexOf(appIns.gcombo_e2_trigger.value)]}
          if(appIns.gcombo_e2_fn.value == "External Override (Level)") {e2_edge = event_edge_array[appIns.gcombo_e2_trigger.options.indexOf(appIns.gcombo_e2_trigger.value)]}
          if(appIns.gcombo_e2_fn.value == "External Trap")             {e2_edge = "XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_NONE"}
          if(appIns.gcombo_e2_fn.value == "External Start" &&
              appIns.gcheck_sync_start.value)                          {e2_edge = "XMC_CCU8_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE"}

          if(appIns.gcombo_e0_fn.value == "No Event")                  {e0_level = "XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW"}
          if(appIns.gcombo_e0_fn.value == "External Start")            {e0_level = "XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW"}
          if(appIns.gcombo_e0_fn.value == "External Stop")             {e0_level = "XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW"}
          if(appIns.gcombo_e0_fn.value == "External Count Direction")  {e0_level = event_level_array[appIns.gcombo_ext_count_dir_level.options.indexOf(appIns.gcombo_ext_count_dir_level.value)]}
          if(appIns.gcombo_e0_fn.value == "External Gating")           {e0_level = event_level_array[appIns.gcombo_ext_gate_level.options.indexOf(appIns.gcombo_ext_gate_level.value)]}
          if(appIns.gcombo_e0_fn.value == "External Count")            {e0_level = "XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW"}
          if(appIns.gcombo_e0_fn.value == "External Load")             {e0_level = "XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW"}
          if(appIns.gcombo_e0_fn.value == "External Modulation")       {e0_level = event_level_array[appIns.gcombo_ext_mod_level.options.indexOf(appIns.gcombo_ext_mod_level.value)]}

          
          if(appIns.gcombo_e1_fn.value == "No Event")                  {e1_level = "XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW"}
          if(appIns.gcombo_e1_fn.value == "External Start")            {e1_level = "XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW"}
          if(appIns.gcombo_e1_fn.value == "External Stop")             {e1_level = "XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW"}
          if(appIns.gcombo_e1_fn.value == "External Count Direction")  {e1_level = event_level_array[appIns.gcombo_ext_count_dir_level.options.indexOf(appIns.gcombo_ext_count_dir_level.value)]}
          if(appIns.gcombo_e1_fn.value == "External Gating")           {e1_level = event_level_array[appIns.gcombo_ext_gate_level.options.indexOf(appIns.gcombo_ext_gate_level.value)]}
          if(appIns.gcombo_e1_fn.value == "External Count")            {e1_level = "XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW"}
          if(appIns.gcombo_e1_fn.value == "External Load")             {e1_level = "XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW"}
          if(appIns.gcombo_e1_fn.value == "External Modulation")       {e1_level = event_level_array[appIns.gcombo_ext_mod_level.options.indexOf(appIns.gcombo_ext_mod_level.value)]}
          if(appIns.gcombo_e1_fn.value == "External Override (Edge)")  {e1_level = "XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW"}
          
          
          if(appIns.gcombo_e2_fn.value == "No Event")                  {e2_level = "XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW"}
          if(appIns.gcombo_e2_fn.value == "External Start")            {e2_level = "XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW"}
          if(appIns.gcombo_e2_fn.value == "External Stop")             {e2_level = "XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW"}
          if(appIns.gcombo_e2_fn.value == "External Count Direction")  {e2_level = event_level_array[appIns.gcombo_ext_count_dir_level.options.indexOf(appIns.gcombo_ext_count_dir_level.value)]}
          if(appIns.gcombo_e2_fn.value == "External Gating")           {e2_level = event_level_array[appIns.gcombo_ext_gate_level.options.indexOf(appIns.gcombo_ext_gate_level.value)]}
          if(appIns.gcombo_e2_fn.value == "External Count")            {e2_level = "XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW"}
          if(appIns.gcombo_e2_fn.value == "External Load")             {e2_level = "XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW"}
          if(appIns.gcombo_e2_fn.value == "External Modulation")       {e2_level = event_level_array[appIns.gcombo_ext_mod_level.options.indexOf(appIns.gcombo_ext_mod_level.value)]}
          if(appIns.gcombo_e2_fn.value == "External Override (Level)") {e2_level = event_level_array[appIns.gcombo_ext_e2_override_level.options.indexOf(appIns.gcombo_ext_e2_override_level.value)]}
          if(appIns.gcombo_e2_fn.value == "External Trap")             {e2_level = event_level_array[appIns.gcombo_ext_trap_level.options.indexOf(appIns.gcombo_ext_trap_level.value)]}
          
          if     (appIns.gcombo_e0_fn.value == "External Start")       {ext_start_event = "XMC_CCU8_SLICE_EVENT_0"}
          else if(appIns.gcombo_e1_fn.value == "External Start")       {ext_start_event = "XMC_CCU8_SLICE_EVENT_1"}
          else if(appIns.gcombo_e2_fn.value == "External Start")       {ext_start_event = "XMC_CCU8_SLICE_EVENT_2"}
          else                                                         {ext_start_event = "XMC_CCU8_SLICE_EVENT_NONE"}
          
          ext_start_mode = external_start_mode_array[appIns.gcombo_ext_start_action.options.indexOf(appIns.gcombo_ext_start_action.value)]
          
          
          if     (appIns.gcombo_e0_fn.value == "External Stop")        {ext_stop_event = "XMC_CCU8_SLICE_EVENT_0"}
          else if(appIns.gcombo_e1_fn.value == "External Stop")        {ext_stop_event = "XMC_CCU8_SLICE_EVENT_1"}
          else if(appIns.gcombo_e2_fn.value == "External Stop")        {ext_stop_event = "XMC_CCU8_SLICE_EVENT_2"}
          else                                                         {ext_stop_event = "XMC_CCU8_SLICE_EVENT_NONE"}

          ext_stop_mode = external_stop_mode_array[appIns.gcombo_ext_stop_action.options.indexOf(appIns.gcombo_ext_stop_action.value)]
          
          if     (appIns.gcombo_e0_fn.value == "External Count Direction") {ext_count_dir_event = "XMC_CCU8_SLICE_EVENT_0"}
          else if(appIns.gcombo_e1_fn.value == "External Count Direction") {ext_count_dir_event = "XMC_CCU8_SLICE_EVENT_1"}
          else if(appIns.gcombo_e2_fn.value == "External Count Direction") {ext_count_dir_event = "XMC_CCU8_SLICE_EVENT_2"}
          else                                                             {ext_count_dir_event = "XMC_CCU8_SLICE_EVENT_NONE"}

          if     (appIns.gcombo_e0_fn.value == "External Gating")       {ext_gate_event = "XMC_CCU8_SLICE_EVENT_0"}
          else if(appIns.gcombo_e1_fn.value == "External Gating")       {ext_gate_event = "XMC_CCU8_SLICE_EVENT_1"}
          else if(appIns.gcombo_e2_fn.value == "External Gating")       {ext_gate_event = "XMC_CCU8_SLICE_EVENT_2"}
          else                                                          {ext_gate_event = "XMC_CCU8_SLICE_EVENT_NONE"}

          if     (appIns.gcombo_e0_fn.value == "External Count")        {ext_count_event = "XMC_CCU8_SLICE_EVENT_0"}
          else if(appIns.gcombo_e1_fn.value == "External Count")        {ext_count_event = "XMC_CCU8_SLICE_EVENT_1"}
          else if(appIns.gcombo_e2_fn.value == "External Count")        {ext_count_event = "XMC_CCU8_SLICE_EVENT_2"}
          else                                                          {ext_count_event = "XMC_CCU8_SLICE_EVENT_NONE"}

          if     (appIns.gcombo_e0_fn.value == "External Load")         {ext_load_event = "XMC_CCU8_SLICE_EVENT_0"}
          else if(appIns.gcombo_e1_fn.value == "External Load")         {ext_load_event = "XMC_CCU8_SLICE_EVENT_1"}
          else if(appIns.gcombo_e2_fn.value == "External Load")         {ext_load_event = "XMC_CCU8_SLICE_EVENT_2"}
          else                                                          {ext_load_event = "XMC_CCU8_SLICE_EVENT_NONE"}

          if     (appIns.gcombo_e0_fn.value == "External Modulation")   {ext_mod_event = "XMC_CCU8_SLICE_EVENT_0"}
          else if(appIns.gcombo_e1_fn.value == "External Modulation")   {ext_mod_event = "XMC_CCU8_SLICE_EVENT_1"}
          else if(appIns.gcombo_e2_fn.value == "External Modulation")   {ext_mod_event = "XMC_CCU8_SLICE_EVENT_2"}
          else                                                          {ext_mod_event = "XMC_CCU8_SLICE_EVENT_NONE"}
 
          ext_mod_mode    = external_mod_mode_array[appIns.gcombo_ext_mod_mode.options.indexOf(appIns.gcombo_ext_mod_mode.value)]
          ext_mod_sync    = boolArray[appIns.gcombo_ext_mod_sync.options.indexOf(appIns.gcombo_ext_mod_sync.value)]
          
          if     (appIns.gcombo_e0_fn.value == "External Override (Edge)")   {ext_override_edge_event = "XMC_CCU8_SLICE_EVENT_0"}
          else if(appIns.gcombo_e1_fn.value == "External Override (Edge)")   {ext_override_edge_event = "XMC_CCU8_SLICE_EVENT_1"}
          else if(appIns.gcombo_e2_fn.value == "External Override (Edge)")   {ext_override_edge_event = "XMC_CCU8_SLICE_EVENT_2"}
          else                                                               {ext_override_edge_event = "XMC_CCU8_SLICE_EVENT_NONE"}
 
          if     (appIns.gcombo_e0_fn.value == "External Override (Level)")  {ext_override_level_event = "XMC_CCU8_SLICE_EVENT_0"}
          else if(appIns.gcombo_e1_fn.value == "External Override (Level)")  {ext_override_level_event = "XMC_CCU8_SLICE_EVENT_1"}
          else if(appIns.gcombo_e2_fn.value == "External Override (Level)")  {ext_override_level_event = "XMC_CCU8_SLICE_EVENT_2"}
          else                                                               {ext_override_level_event = "XMC_CCU8_SLICE_EVENT_NONE"}
 
          if     (appIns.gcombo_e0_fn.value == "External Trap")              {ext_trap_event = "XMC_CCU8_SLICE_EVENT_0"}
          else if(appIns.gcombo_e1_fn.value == "External Trap")              {ext_trap_event = "XMC_CCU8_SLICE_EVENT_1"}
          else if(appIns.gcombo_e2_fn.value == "External Trap")              {ext_trap_event = "XMC_CCU8_SLICE_EVENT_2"}
          else                                                               {ext_trap_event = "XMC_CCU8_SLICE_EVENT_NONE"}
          
          ext_trap_sync   = boolArray[appIns.gcombo_ext_trap_sync.options.indexOf(appIns.gcombo_ext_trap_sync.value)]
          ext_trap_exit   = trap_exit_array[appIns.gcombo_ext_trap_exit.options.indexOf(appIns.gcombo_ext_trap_exit.value)]
          ext_trap_enable = appIns.gcheck_ext_trap.value;

          
          dt_ch1_enable   = 0;//boolArray.indexOf(appIns.gcheck_ch1_dt_enable.value.toString());  
          dt_ch2_enable   = 0;//boolArray.indexOf(appIns.gcheck_ch2_dt_enable.value.toString());
          dt_clock_nsec   = (Double)1000/((Double)appIns.gfloat_clock.value / (2.power(appIns.ginteger_prescaler.value) * 2.power(appIns.ginteger_prescaler_dead_time.value)));
          dt_ch1_rise     = 0;//(Integer) Math.ceil(appIns.gfloat_ch1_dt_rise.value / dt_clock_nsec).toInteger();
          dt_ch1_fall     = 0;//(Integer) Math.ceil(appIns.gfloat_ch1_dt_fall.value / dt_clock_nsec).toInteger();
          dt_ch2_rise     = 0;//(Integer) Math.ceil(appIns.gfloat_ch2_dt_rise.value / dt_clock_nsec).toInteger();
          dt_ch2_fall     = 0;//(Integer) Math.ceil(appIns.gfloat_ch2_dt_fall.value / dt_clock_nsec).toInteger();
          dt_div          = dtc_div_array[0]
           
          if(appIns.gcheck_hr_dt_enable.value){
              dt_hrpwm_rise   = (Integer) Math.ceil((appIns.gfloat_hr_dt_rise.value * appIns.gfloat_clock.value )/(1000));
              dt_hrpwm_fall   = (Integer) Math.ceil((appIns.gfloat_hr_dt_fall.value * appIns.gfloat_clock.value )/(1000));
          }
          else {
              dt_hrpwm_rise   = 0;
              dt_hrpwm_fall   = 0;
          }
                            

           Boolean.valueOf(appIns.gcheck_hr_dt_enable.value)
          if(appIns.gcombo_compare_mode.value == "Symmetric")
          {
              hr_cr1          = (Integer) appIns.ginteger_hr_cmp1.value;
              hr_cr2          = (Integer) appIns.ginteger_hr_cmp2.value;
          }    
          if(appIns.gcombo_compare_mode.value == "Asymmetric")
          {
              hr_cr1          = (Integer) appIns.ginteger_hr_cmp1.value;
              hr_cr2          = (Integer) appIns.ginteger_hr_cmp2.value;
          }
          hr_cr_max       = (Integer) appIns.ginteger_hr_cmp1.maxValue;
          
          dither_enable   = false;
          dither_cmp      = 0;
          dither_period = "0";
          dither_duty   = "0";

          mcm_ch1_enable       = boolArray.indexOf("false");
          mcm_ch2_enable       = boolArray.indexOf("false");
          mcm_shadow_txfr      = boolArray.indexOf("false");
          
          prescaler_flt_val    = 0;
          prescaler_mode   = prescaler_mode_array[0];

              hrc_channel_no           = appIns.hwres_hrpwm_hrc.getSolverUri().getAt(6);
              hrc_slice_ptr            = hrc_channel_array[appIns.hwres_hrpwm_hrc.getSolverUri().getAt(6).toString().toInteger()];
              hrpwm_hr_path_enable     = appIns.gcheck_hr_enable.value;
              hrpwm_lr_path_enable     = appIns.gcheck_lr_enable.value;
              hrpwm_hr_path_enable_mask= hr_enable_array[appIns.hwres_hrpwm_hrc.getSolverUri().getAt(6).toInteger()];
              hrpwm_lr_path_enable_mask= lr_enable_array[appIns.hwres_hrpwm_hrc.getSolverUri().getAt(6).toInteger()];
              hr_shadow_transfer_msk   = hrc_shadow_tx_array[((appIns.hwres_hrpwm_hrc.getSolverUri().getAt(6).toInteger() * 2) + 0)];
              hr_dt_transfer_msk       = hrc_shadow_tx_array[((appIns.hwres_hrpwm_hrc.getSolverUri().getAt(6).toInteger() * 2) + 1)];
              hrc_dt_enable            = hrpwm_func_status_array[boolArray.indexOf(appIns.gcheck_hr_dt_enable.value.toString())];
              
              hrc_out0_trap_enable     = hrpwm_func_status_array[boolArray.indexOf(appIns.gcheck_hr_out0_trap.value.toString())];
              hrc_out0_pass_level      = appIns.gcombo_hr_out0_pass_level.options.indexOf(appIns.gcombo_hr_out0_pass_level.value);
              hrc_out0_conn            = hrpwm_func_status_array[appIns.gcombo_hr_out0_conn.options.indexOf(appIns.gcombo_hr_out0_conn.value)];
              hrc_out0_enable          = hrpwm_func_status_array[boolArray.indexOf(appIns.gcheck_hr_out0_enable.value.toString())];
              
              hrc_out1_trap_enable     = hrpwm_func_status_array[boolArray.indexOf(appIns.gcheck_hr_out1_trap.value.toString())];
              hrc_out1_pass_level      = appIns.gcombo_hr_out1_pass_level.options.indexOf(appIns.gcombo_hr_out1_pass_level.value);
              hrc_out1_conn            = hrpwm_func_status_array[appIns.gcombo_hr_out1_conn.options.indexOf(appIns.gcombo_hr_out1_conn.value)];
              hrc_out1_enable          = hrpwm_func_status_array[boolArray.indexOf(appIns.gcheck_hr_out1_enable.value.toString())];
              
              if(appIns.gcombo_compare_mode.value == "Symmetric")
                  {hrc_high_res_mode0  = 'XMC_HRPWM_HRC_HR_EDGE_SEL_BOTH';} /*XMC_HRPWM_HRC_HR_EDGE_SEL_FALLING*/
              else
                  {hrc_high_res_mode0  = 'XMC_HRPWM_HRC_HR_EDGE_SEL_BOTH';}
                  
              hrc_set_config0          = hrc_input_array       [(int)appIns.hwres_hrpwm_hrc.getRegValue("hrcgsel","hrcgsel_s0m")];
              hrc_clear_config0        = hrc_input_array       [(int)appIns.hwres_hrpwm_hrc.getRegValue("hrcgsel","hrcgsel_c0m")];
              hrc_comparator_set0      = hrc_cmp_sel_array     [(int)appIns.hwres_hrpwm_hrc.getRegValue("hrcgsel","hrcgsel_c0ss")];
              hrc_comparator_clear0    = hrc_cmp_sel_array     [(int)appIns.hwres_hrpwm_hrc.getRegValue("hrcgsel","hrcgsel_c0cs")];
              hrc_timer_sel0           = hrc_ch_timer_sel_array[(int)appIns.hwres_hrpwm_hrc.getRegValue("hrctsel","hrctsel_tsel0")];
              hrc_set_edge_config0     = hrc_src_edge_array    [appIns.gcombo_hr_set0.options.indexOf(appIns.gcombo_hr_set0.value)];
              hrc_clear_edge_config0   = hrc_src_edge_array    [appIns.gcombo_hr_clear0.options.indexOf(appIns.gcombo_hr_clear0.value)];
              hrc_src_trap_enable0     = 'XMC_HRPWM_ENABLE';
              
              if(appIns.gcombo_compare_mode.value == "Symmetric")
                   {hrc_high_res_mode1 = 'XMC_HRPWM_HRC_HR_EDGE_SEL_BOTH';} /*XMC_HRPWM_HRC_HR_EDGE_SEL_FALLING*/
              else
                   {hrc_high_res_mode1 = 'XMC_HRPWM_HRC_HR_EDGE_SEL_BOTH';}
                     
              hrc_set_config1          = hrc_input_array       [(int)appIns.hwres_hrpwm_hrc.getRegValue("hrcgsel","hrcgsel_s1m")];
              hrc_clear_config1        = hrc_input_array       [(int)appIns.hwres_hrpwm_hrc.getRegValue("hrcgsel","hrcgsel_c1m")];
              hrc_comparator_set1      = hrc_cmp_sel_array     [(int)appIns.hwres_hrpwm_hrc.getRegValue("hrcgsel","hrcgsel_c1ss")];
              hrc_comparator_clear1    = hrc_cmp_sel_array     [(int)appIns.hwres_hrpwm_hrc.getRegValue("hrcgsel","hrcgsel_c1cs")];
              hrc_timer_sel1           = hrc_ch_timer_sel_array[(int)appIns.hwres_hrpwm_hrc.getRegValue("hrctsel","hrctsel_tsel1")];
              hrc_set_edge_config1     = hrc_src_edge_array    [appIns.gcombo_lr_set1.options.indexOf(appIns.gcombo_lr_set1.value)];
              hrc_clear_edge_config1   = hrc_src_edge_array    [appIns.gcombo_lr_clear1.options.indexOf(appIns.gcombo_lr_clear1.value)];
              hrc_src_trap_enable1     = 'XMC_HRPWM_ENABLE';
              
              hrpwm_module_enabled     = true;

              hrc_channel_config       = "&" + appInst + "_hrc_channel_config";
              hrc_src_config0          = "&" + appInst + "_hrc_src_config0";
              hrc_src_config1          = "&" + appInst + "_hrc_src_config1";
              
          
/**************************************.......IO.......***************************************************/    
                
          hr_out0_enable              = appIns.gcheck_hr_out0_enable.value
          if(appIns.gcheck_hr_out0_enable.value){
              hr_out0_port            = appIns.hwres_port_hrout0.getSolverUri().getAt(4);
              hr_out0_pin             = appIns.hwres_port_hrout0.getSolverUri().getAt(6);
              hr_out0_iocr_pcr        = appIns.hwres_port_hrout0.getRegValue("","iocr_pcr");
              hr_out0_iocr_oe         = appIns.hwres_port_hrout0.getRegValue("","iocr_oe");
              hr_out0_hwsel_hw        = appIns.hwres_port_hrout0.getRegValue("","hwsel_hw");
              hr_out0_pdisc_pdis      = appIns.hwres_port_hrout0.getRegValue("","pdisc_pdis");
              hr_out0_mode            = gpio_mode_array[(8 * (appIns.gcombo_hr_out0_char.options.indexOf(appIns.gcombo_hr_out0_char.value) + 1)) + (Integer)hr_out0_iocr_pcr.toInteger()];
              hr_out0_ptr             = "PORT" + hr_out0_port + "_BASE";
              hr_out0_config          = "&" + appInst + "_hr_out0_config";
              hr_out0_output_strength = gpio_output_strength[appIns.gcombo_hr_out0_strng.options.indexOf(appIns.gcombo_hr_out0_strng.value)];
          }
          else{
              hr_out0_pin             = "0";
              hr_out0_ptr             = "NULL";
              hr_out0_config          = "NULL";
              hr_out0_output_strength = "NULL";
          }

          hr_out1_enable              = appIns.gcheck_hr_out1_enable.value
          if(appIns.gcheck_hr_out1_enable.value){
              hr_out1_port            = appIns.hwres_port_hrout1.getSolverUri().getAt(4);
              hr_out1_pin             = appIns.hwres_port_hrout1.getSolverUri().getAt(6);
              hr_out1_iocr_pcr        = appIns.hwres_port_hrout1.getRegValue("","iocr_pcr");
              hr_out1_iocr_oe         = appIns.hwres_port_hrout1.getRegValue("","iocr_oe");
              hr_out1_hwsel_hw        = appIns.hwres_port_hrout1.getRegValue("","hwsel_hw");
              hr_out1_pdisc_pdis      = appIns.hwres_port_hrout1.getRegValue("","pdisc_pdis");
              hr_out1_mode            = gpio_mode_array[(8 * (appIns.gcombo_hr_out1_char.options.indexOf(appIns.gcombo_hr_out1_char.value) + 1)) + (Integer)hr_out1_iocr_pcr.toInteger()];
              hr_out1_ptr             = "PORT" + hr_out1_port + "_BASE";
              hr_out1_config          = "&" + appInst + "_hr_out1_config";
              hr_out1_output_strength = gpio_output_strength[appIns.gcombo_hr_out1_strng.options.indexOf(appIns.gcombo_hr_out1_strng.value)];
          }
          else{
              hr_out1_pin             = "0";
              hr_out1_ptr             = "NULL";
              hr_out1_config          = "NULL";
              hr_out1_output_strength = "NULL";
          }
          

/**************************************************************************************/
    out.print("""
        const XMC_CCU8_SLICE_COMPARE_CONFIG_t  ${appInst}_timer_handle     =
            {
              .timer_mode            = (uint32_t)${counting_mode},
              .monoshot              = (uint32_t)${single_shot},
              .shadow_xfer_clear     = 0U,
              .dither_timer_period   = ${dither_period}U,
              .dither_duty_cycle     = ${dither_duty}U,
        
              .prescaler_mode        = (uint32_t)${prescaler_mode},
        
              .mcm_ch1_enable        = ${mcm_ch1_enable}U,
              .mcm_ch2_enable        = ${mcm_ch2_enable}U,
        
              .slice_status          = (uint32_t)${slice_status},
        
              .passive_level_out0    = (uint32_t)${ch1_out0_pass_level}, 
              .passive_level_out1    = (uint32_t)${ch1_out1_pass_level}, 
              .passive_level_out2    = (uint32_t)${ch2_out2_pass_level}, 
              .passive_level_out3    = (uint32_t)${ch2_out3_pass_level}, 
        
              .asymmetric_pwm        = ${asymmetric}U,
        
              .invert_out0           = ${ch1_out0_state}U,
              .invert_out1           = ${ch1_out1_state}U,
              .invert_out2           = ${ch2_out2_state}U,
              .invert_out3           = ${ch2_out3_state}U,
        
              .prescaler_initval     = ${prescaler}U,
              .float_limit           = ${prescaler_flt_val}U,
              .dither_limit          = ${dither_cmp}U,
              .timer_concatenation   = 0U,
            };


        const XMC_CCU8_SLICE_EVENT_CONFIG_t ${appInst}_event0_config = 
             {
                .mapped_input        = ${e0_mapped_input},
                .edge                = ${e0_edge},
                .level               = ${e0_level},
                .duration            = ${e0_filter},
             };

        const XMC_CCU8_SLICE_EVENT_CONFIG_t ${appInst}_event1_config = 
             {
                .mapped_input        = ${e1_mapped_input},
                .edge                = ${e1_edge},
                .level               = ${e1_level},
                .duration            = ${e1_filter},
             };

        const XMC_CCU8_SLICE_EVENT_CONFIG_t ${appInst}_event2_config = 
             {
                .mapped_input        = ${e2_mapped_input},
                .edge                = ${e2_edge},
                .level               = ${e2_level},
                .duration            = ${e2_filter},
             };

        const XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t  ${appInst}_dt_config = 
            {
              .enable_dead_time_channel1         = ${dt_ch1_enable}U,
              .enable_dead_time_channel2         = ${dt_ch2_enable}U,
              .channel1_st_path                  = ${dt_ch1_enable}U,
              .channel1_inv_st_path              = ${dt_ch1_enable}U,
              .channel2_st_path                  = ${dt_ch2_enable}U,
              .channel2_inv_st_path              = ${dt_ch2_enable}U,
              .div                               = (uint32_t)${dt_div},
        
              .channel1_st_rising_edge_counter   = ${dt_ch1_rise}U,
              .channel1_st_falling_edge_counter  = ${dt_ch1_fall}U,
        
              .channel2_st_rising_edge_counter   = ${dt_ch2_rise}U,
              .channel2_st_falling_edge_counter  = ${dt_ch2_fall}U,
            };

""");


//if (appIns.gcheck_high_res_module.value){
out.print("""
        const XMC_HRPWM_HRC_CONFIG_t ${appInst}_hrc_channel_config = 
              {
                .dt_enable                       = (uint32_t)${hrc_dt_enable},
                .hr_out0_trap_enable             = (uint32_t)${hrc_out0_trap_enable},
                .hr_out1_trap_enable             = (uint32_t)${hrc_out1_trap_enable},
                .hrc_shadow_xfer_linktoCCU8      = (uint32_t)XMC_HRPWM_FUNC_STATUS_ENABLE,
                .dt_shadow_xfer_linktoCCU8       = (uint32_t)XMC_HRPWM_FUNC_STATUS_ENABLE,
                .hr_out0_inv_enable              = (uint32_t)${hrc_out0_conn},
                .hr_out1_inv_enable              = (uint32_t)${hrc_out1_conn},
                .dt_trigger_sel                  = 0U,

                .hr_out0_passive_level_out       = ${hrc_out0_pass_level}U,
                .hr_out1_passive_level_out       = ${hrc_out1_pass_level}U,
              };

        const XMC_HRPWM_HRC_SRC_CONFIG_t   ${appInst}_hrc_src_config0 =
             {
                .high_res_mode                   = ${hrc_high_res_mode0},
                .set_config                      = ${hrc_set_config0},
                .clear_config                    = ${hrc_clear_config0},
                .cmp_set                         = ${hrc_comparator_set0},
                .cmp_clear                       = ${hrc_comparator_clear0},
                .timer_sel                       = ${hrc_timer_sel0},
                .set_edge_config                 = ${hrc_set_edge_config0},
                .clear_edge_config               = ${hrc_clear_edge_config0},
                .src_trap_enable                 = ${hrc_out0_trap_enable}
             };

        const XMC_HRPWM_HRC_SRC_CONFIG_t   ${appInst}_hrc_src_config1 = 
             {
                .high_res_mode                   = ${hrc_high_res_mode1},
                .set_config                      = ${hrc_set_config1},
                .clear_config                    = ${hrc_clear_config1},
                .cmp_set                         = ${hrc_comparator_set1},
                .cmp_clear                       = ${hrc_comparator_clear1},
                .timer_sel                       = ${hrc_timer_sel1},
                .set_edge_config                 = ${hrc_set_edge_config1},
                .clear_edge_config               = ${hrc_clear_edge_config1},
                .src_trap_enable                 = ${hrc_out1_trap_enable}
             };
/*------------------------------------------------------------------------------------*/
""");
//}


if (appIns.gcheck_hr_out0_enable.value){
    out.print("""

#if UC_FAMILY == XMC1
        const XMC_GPIO_CONFIG_t  ${appInst}_hr_out0_config    =
           {
               .mode                = ${hr_out0_mode},
               .input_hysteresis    = XMC_GPIO_INPUT_HYSTERESIS_STANDARD,
               .output_level        = XMC_GPIO_OUTPUT_LEVEL_LOW
           };
#endif

#if UC_FAMILY == XMC4
        const XMC_GPIO_CONFIG_t  ${appInst}_hr_out0_config    =
           {
               .mode                = ${hr_out0_mode},
               .output_level        = XMC_GPIO_OUTPUT_LEVEL_LOW,
               .output_strength     = ${hr_out0_output_strength}
           };
#endif
/*------------------------------------------------------------------------------------*/
""");
}
    
if (appIns.gcheck_hr_out1_enable.value){
    out.print("""

#if UC_FAMILY == XMC1
        const XMC_GPIO_CONFIG_t  ${appInst}_hr_out1_config    =
           {
               .mode                = ${hr_out1_mode},
               .input_hysteresis    = XMC_GPIO_INPUT_HYSTERESIS_STANDARD,
               .output_level        = XMC_GPIO_OUTPUT_LEVEL_LOW
           };
#endif

#if UC_FAMILY == XMC4
        const XMC_GPIO_CONFIG_t  ${appInst}_hr_out1_config    =
           {
               .mode                = ${hr_out1_mode},
               .output_level        = XMC_GPIO_OUTPUT_LEVEL_LOW,
               .output_strength     = ${hr_out1_output_strength}
           };
#endif
/*------------------------------------------------------------------------------------*/
""");
}

out.print("""
        const HRPWM_CONFIG_t  ${appInst}_config_handle =
            {
                .start_control                       = ${start_control},      
                .period_value                        = ${period}U,
                .compare1_value                      = ${compare1_value}U,
                .compare2_value                      = ${compare2_value}U,

                .int_per_match                       = ${int_per_match},
                .int_cmp1_match_up                   = ${int_cmp1_match_up},
                .int_cmp1_match_down                 = ${int_cmp1_match_down},
                .int_cmp2_match_up                   = ${int_cmp2_match_up},
                .int_cmp2_match_down                 = ${int_cmp2_match_down},
                .int_one_match_down                  = ${int_one_match_down},
                .int_e0                              = ${int_e0},
                .int_e1                              = ${int_e1},
                .int_e2                              = ${int_e2},
                
                .sr_per_match                        = ${sr_per_match},
                .sr_cmp1_match_up                    = ${sr_cmp1_match_up},
                .sr_cmp1_match_down                  = ${sr_cmp1_match_down},
                .sr_cmp2_match_up                    = ${sr_cmp2_match_up},
                .sr_cmp2_match_down                  = ${sr_cmp2_match_down},
                .sr_one_match_down                   = ${sr_one_match_down},
                .sr_e0                               = ${sr_e0},
                .sr_e1                               = ${sr_e1},
                .sr_e2                               = ${sr_e2},
                
                .event0_config_ptr                   = &${appInst}_event0_config,
                .event1_config_ptr                   = &${appInst}_event1_config,
                .event2_config_ptr                   = &${appInst}_event2_config,
                 
                .ext_start_event                     = ${ext_start_event},
                .ext_start_mode                      = ${ext_start_mode},

                .ext_stop_event                      = ${ext_stop_event},
                .ext_stop_mode                       = ${ext_stop_mode},

                .ext_count_dir_event                 = ${ext_count_dir_event},

                .ext_gate_event                      = ${ext_gate_event},

                .ext_count_event                     = ${ext_count_event},

                .ext_load_event                      = ${ext_load_event},

                .ext_mod_event                       = ${ext_mod_event},
                .ext_mod_mode                        = ${ext_mod_mode},
                .ext_mod_sync                        = ${ext_mod_sync},

                .ext_override_edge_event             = ${ext_override_edge_event},

                .ext_override_level_event            = ${ext_override_level_event},

                .ext_trap_enable                     = ${ext_trap_enable},
                .ext_trap_event                      = ${ext_trap_event},
                .ext_trap_sync                       = ${ext_trap_sync},
                .ext_trap_exit                       = ${ext_trap_exit},

                .dt_config_ptr                       = &${appInst}_dt_config,

                .ccu8_cc8_slice_timer_ptr            = &${appInst}_timer_handle,

                .hrpwm_hr_path_enable                =${hrpwm_hr_path_enable},
                .hrpwm_lr_path_enable                =${hrpwm_lr_path_enable},
                .hrpwm_hr_path_enable_mask           = (uint32_t)${hrpwm_hr_path_enable_mask},
                .hrpwm_lr_path_enable_mask           = (uint32_t)${hrpwm_lr_path_enable_mask},
                .hrc_channel_config_ptr              = ${hrc_channel_config},
                .hrc_src_config0_ptr                 = ${hrc_src_config0},
                .hrc_src_config1_ptr                 = ${hrc_src_config1},
                .dt_hrpwm_rise                       = ${dt_hrpwm_rise}U,
                .dt_hrpwm_fall                       = ${dt_hrpwm_fall}U,
                .hr_cr1                              = ${hr_cr1}U,
                .hr_cr2                              = ${hr_cr2}U,

                .gpio_hr_out0_enable                 = ${hr_out0_enable},
                .gpio_hr_out0_ptr                    = (XMC_GPIO_PORT_t *) ${hr_out0_ptr},
                .gpio_hr_out0_pin                    = ${hr_out0_pin}U,
                .gpio_hr_out0_config_ptr             = ${hr_out0_config},    

                .gpio_hr_out1_enable                 = ${hr_out1_enable},
                .gpio_hr_out1_ptr                    = (XMC_GPIO_PORT_t *) ${hr_out1_ptr},
                .gpio_hr_out1_pin                    = ${hr_out1_pin}U,
                .gpio_hr_out1_config_ptr             = ${hr_out1_config},    

                .global_ccu8_handle                  = ${CCU8_Global_Handle},
                .global_hrpwm_handle                 = ${HRPWM_Global_Handle},

            };

         HRPWM_t ${appInst} =
            {
                .config_ptr                          = &${appInst}_config_handle,
                .ccu8_module_ptr                     = ${KernRegs_Handle},
                .ccu8_slice_ptr                      = ${Slice_Handle},
                .kernel_number                       = ${KernelNo}U,
                .slice_number                        = ${SliceNo}U,
                .shadow_txfr_msk                     = (uint32_t)${shadow_txfr_msk},
                .dither_shadow_txfr_msk              = (uint32_t)${dither_shadow_txfr_msk},
                .prescaler_shadow_txfr_msk           = (uint32_t)${prescaler_shadow_txfr_msk},

                .hrc_module_ptr                      = HRPWM0,
                .hrc_slice_ptr                       = ${hrc_slice_ptr},
                .hr_shadow_transfer_msk              = (uint32_t)${hr_shadow_transfer_msk},
                .hr_dt_transfer_msk                  = (uint32_t)${hr_dt_transfer_msk},
                .hr_cr_max                           = ${hr_cr_max},

                .state                               = HRPWM_STATE_UNINITIALIZED,
                .sym_duty1                           = ${sym_duty1}F,
                .sym_duty2                           = ${sym_duty2}F,
                .asym_duty                           = ${asym_duty}F,
                .asym_shift                          = ${asym_shift}F,
            };

/**************************************************************************************/
""");


} else {
out.print("""
  /*CCU8/CCU4 resource is not mapped for PWM app instant: ${appInst} */
""");
  }
}


/**
 * @}
 */
 
/*CODE_BLOCK_END*/
