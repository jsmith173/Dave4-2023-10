/*
 * main.c
 *
 *  Created on: 2022 Jun 17 07:09:48
 *  Author: Attila
 */




#include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declaration)

/**

 * @brief main() - Application entry point
 *
 * <b>Details of function</b><br>
 * This routine is the application entry point. It is invoked by the device startup code. It is responsible for
 * invoking the APP initialization dispatcher routine - DAVE_Init() and hosting the place-holder for user application
 * code.
 */

#define BLOCK_SIZE 16

// Transmit and receive buffers
int tx_buf_arr[64];
int rx_buf_arr[64];
int rx_check_arr[64];
int *tx_buf = (int *)tx_buf_arr;
int *rx_buf = (int *)rx_buf_arr;
int *rx_check = (int *)rx_check_arr;

// Other convenient globals
volatile int xfer_cmplt_cb = 0, block_count = 0;
volatile int dma_error_cb = 0;
volatile int xfer_block_cmplt = 0;
volatile int src_xfer_cmplt = 0;
volatile int dest_xfer_cmplt = 0;
volatile int multi_block = 0;
int a, b, error=0;

int main(void)
{
  DAVE_STATUS_t status;
  int i;

  for (i = 0; i < 4*BLOCK_SIZE; i++) tx_buf[i] = i;
  for (i = 0; i < BLOCK_SIZE; i++) rx_check[i] = 48+i;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */

  if (status != DAVE_STATUS_SUCCESS)
  {
    /* Placeholder for error handler code. The while loop below can be replaced with an user error handler. */
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
  }

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  DMA_CH_Enable(&DMA_CH_0);
  while(1U)
  {

  }
}

void user_event_handler (XMC_DMA_CH_EVENT_t event)
{
  DMA_CH_t *dma_ch;
  int i;

  dma_ch = &DMA_CH_0;

    if((event & XMC_DMA_CH_EVENT_TRANSFER_COMPLETE) != 0)
    {
      single_block_count++;
      if(single_block_count == 1)
      {
        DMA_CH_Reload(&DMA_CH_0);
        DMA_CH_Enable(&DMA_CH_0);
      }
    }
}
